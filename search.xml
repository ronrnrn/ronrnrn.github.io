<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Prologue</title>
    <url>/2022/06/09/Prologue/</url>
    <content><![CDATA[
        <h2 id="Prologue"   >
          <a href="#Prologue" class="heading-link"><i class="fas fa-link"></i></a><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h2>
      <p>那天吃过午饭，回图书馆收拾书包，走过林荫道，看到楼梯前老师的背影。他站在原地看手机，左手好像拿着一个小橘子。当时似乎有了一种坚定的感觉，就算不能真正刻苦，不能够到与其相近的高度，心里也总是会有一种定式与实际，因而相信付出即是有收获的。</p>
<p>至今也还记得，高考英语考场上，右前方有个男生被蜜蜂蛰了一下，中途离开教室，直到考试结束后，才回来收拾桌面上的文具。当时很庆幸蜜蜂没有飞到我的身边，因为在那个年纪，没有按时考试、不能如期毕业抑或考试成绩并非所预想的，都会看作是挫折与坎坷。</p>
<p>后来渐渐发觉，认真去做的每件事到最后总会有意料之外但又有迹可循的结果。不管好的、不好的，都不可避免地构成了自己的生活。那些如实逝去的经历与时分，都变成心底红色的、松软的土层。因而对升学的执念也变轻了许多许多，只希望自己能再克制和勤奋一些。</p>
]]></content>
  </entry>
  <entry>
    <title>C语言笔记(上)</title>
    <url>/2022/08/06/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0(%E4%B8%8A)/</url>
    <content><![CDATA[
        <h2 id="第一个程式"   >
          <a href="#第一个程式" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一个程式" class="headerlink" title="第一个程式"></a>第一个程式</h2>
      
        <h3 id="Hello-World"   >
          <a href="#Hello-World" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3>
      <p>Ex：</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	print(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>1、程式进入点 Entry Point</p>
<ul>
<li>从左花括号“{”后开始执行</li>
</ul>
<p>2、述句 Statement</p>
<ul>
<li>分号“;”代表句子的结束</li>
</ul>
<p>3、区块 Block</p>
<ul>
<li>花括号“{}”表示一个区块的开始与结束</li>
</ul>
<p>4、内建函式 Built-in Function</p>
<ul>
<li><p>printf的功能是将字串印在屏幕上</p>
</li>
<li><p>字串用双引号表示</p>
</li>
</ul>
<p>5、程式的结束</p>
<ul>
<li><p>程式的正常结束在Main里面的return指令</p>
</li>
<li><p>0表示程式成功执行完毕</p>
</li>
</ul>

        <h3 id="字元的跳脱"   >
          <a href="#字元的跳脱" class="heading-link"><i class="fas fa-link"></i></a><a href="#字元的跳脱" class="headerlink" title="字元的跳脱"></a>字元的跳脱</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">跳脱序列 | 代表字元     (*)</span><br><span class="line">——————————————————</span><br><span class="line">\n      | 换行</span><br><span class="line">\<span class="string">&quot;      | 双引号</span></span><br><span class="line"><span class="string">\\      | 反斜线</span></span><br><span class="line"><span class="string">\&#x27;      | 单引号</span></span><br><span class="line"><span class="string">\t      | 跳位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(*) 跳脱序列 Escape Sequence</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="简单的文字图形练习"   >
          <a href="#简单的文字图形练习" class="heading-link"><i class="fas fa-link"></i></a><a href="#简单的文字图形练习" class="headerlink" title="简单的文字图形练习"></a>简单的文字图形练习</h3>
      <p>1、写法一</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;H     H     A\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;H     H    A A\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;HHHHHHH   A   A\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;H     H  AAAAAAA\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;H     H  A     A\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>每行用一个printf句子，共5句</li>
</ul>
<p>2、写法二</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;H     H     A\nH     H    A A\nHHHHHHH   A   A\nH     H  AAAAAAA\nH     H  A     A\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>用一个printf句子，中间用\n隔开</li>
</ul>
<p>3、写法三</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;H     H     A\n&quot;</span></span><br><span class="line">			<span class="string">&quot;H     H    A A\n&quot;</span></span><br><span class="line">			<span class="string">&quot;HHHHHHH   A   A\n&quot;</span></span><br><span class="line">			<span class="string">&quot;H     H  AAAAAAA\n&quot;</span></span><br><span class="line">			<span class="string">&quot;H     H  A     A\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>用一个printf句子，5个字符串可换行</li>
</ul>

        <h3 id="求两个数字的和练习"   >
          <a href="#求两个数字的和练习" class="heading-link"><i class="fas fa-link"></i></a><a href="#求两个数字的和练习" class="headerlink" title="求两个数字的和练习"></a>求两个数字的和练习</h3>
      <p>1、写法一</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> integer1;</span><br><span class="line">	<span class="type">int</span> integer2;</span><br><span class="line">	<span class="type">int</span> sum;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the second number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer2);</span><br><span class="line">	sum = integer1 + integer2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sum is %d.&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、简化写法</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> integer1,integer2,sum;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the second number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer2);</span><br><span class="line">	sum = integer1 + integer2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sum is %d.&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、变数定义</p>
<p>(1) int 整型</p>
<p>Ex：</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">—————</span><br><span class="line">|<span class="type">int</span>|</span><br><span class="line">—————</span><br><span class="line"></span><br><span class="line">定义一个<span class="type">int</span>空间，用于存放一个整数</span><br></pre></td></tr></table></div></figure>

<p>4、从键盘输入整数</p>
<ul>
<li><p>scanf表示从键盘读入资料</p>
</li>
<li><p>%d表示十进位整数</p>
</li>
<li><p>&amp;是取址运算子</p>
</li>
</ul>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">（记忆方法） 输入一个值%d，拿出一把钥匙&amp;，打开一扇门x</span><br></pre></td></tr></table></div></figure>

<p>5、计算数字和</p>
<ul>
<li>=是指定运算子，将右边数值算出后，指定为左边的变数内容</li>
</ul>

        <h3 id="求三个数字的和练习"   >
          <a href="#求三个数字的和练习" class="heading-link"><i class="fas fa-link"></i></a><a href="#求三个数字的和练习" class="headerlink" title="求三个数字的和练习"></a>求三个数字的和练习</h3>
      <p>1、写法一</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> integer1,integer2,integer3,sum;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the second number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the third number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer3);</span><br><span class="line">	sum = integer1 + integer2 + integer3;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sum is %d.&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、写法二</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> integer, sum;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer);</span><br><span class="line">	sum = integer;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the second number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer);</span><br><span class="line">	sum = sum + integer;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the third number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer);</span><br><span class="line">	sum = sum + integer;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sum is %d.&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(记忆方法) 定义，提示，输入，计算，输出</li>
</ul>

        <h3 id="数值交换"   >
          <a href="#数值交换" class="heading-link"><i class="fas fa-link"></i></a><a href="#数值交换" class="headerlink" title="数值交换"></a>数值交换</h3>
      <p>1、写法一</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> integer1,integer2,temp;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the second number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer2);</span><br><span class="line">	temp = integer1;</span><br><span class="line">	integer1 = integer2;</span><br><span class="line">	integer2 = temp;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Integer1 is: %d\n&quot;</span>,integer1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Integer2 is: %d\n&quot;</span>,integer2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(方法) 新增一个变量Temp</li>
</ul>
<p>2、写法二</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> integer1,integer2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the second number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;integer2);</span><br><span class="line">	integer1 = integer1 + integer2;</span><br><span class="line">	integer2 = integer1 - integer2;</span><br><span class="line">	integer1 = integer1 - integer2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Integer1 is: %d\n&quot;</span>,integer1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Integer2 is: %d\n&quot;</span>,integer2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(方法) 不添加变量，直接数值计算</li>
</ul>

        <h3 id="程式写作风格初探"   >
          <a href="#程式写作风格初探" class="heading-link"><i class="fas fa-link"></i></a><a href="#程式写作风格初探" class="headerlink" title="程式写作风格初探"></a>程式写作风格初探</h3>
      <ul>
<li>工整简洁的程式码</li>
</ul>
<p>1、程式写作风格 Coding Style</p>
<ul>
<li><p>分号后换一行，容易阅读</p>
</li>
<li><p>每句前面有固定留白(缩排)，可用跳位符Tab键</p>
</li>
<li><p>每个区块的开头跟结尾要换行</p>
</li>
</ul>

        <h2 id="资料型别简介"   >
          <a href="#资料型别简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#资料型别简介" class="headerlink" title="资料型别简介"></a>资料型别简介</h2>
      <ul>
<li>资料型别 Data Type</li>
</ul>
<p>1、资料的储存</p>
<ul>
<li><p>以位元组Byte为单位</p>
</li>
<li><p>1Byte=8bit</p>
</li>
<li><p>1bit表示0或1两种值</p>
</li>
</ul>
<p>2、C语言内建常建资料型别</p>
<p>Ex:</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">资料型别</th>
<th align="center">名称</th>
<th align="center">大小</th>
</tr>
</thead>
<tbody><tr>
<td align="center">短整型</td>
<td align="center">short int</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">整型</td>
<td align="center">int</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">长整型</td>
<td align="center">long int</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">字元</td>
<td align="center">char</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">单精度浮点数</td>
<td align="center">float</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">倍精度浮点数</td>
<td align="center">double</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">无</td>
<td align="center">void</td>
<td align="center">/</td>
</tr>
</tbody></table></div>
<p>3、使用sizeof查看所占记忆空间的大小</p>
<ul>
<li>单位是位元组 Byte</li>
</ul>
<p>4、定义变数</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) 指定型别与名称:</span><br><span class="line"></span><br><span class="line">资料型别 变数名称;</span><br><span class="line"><span class="type">int</span>      num;</span><br><span class="line">————————————————————</span><br><span class="line">(<span class="number">2</span>) 初始化:</span><br><span class="line"><span class="type">int</span>      num = <span class="number">0</span>;</span><br></pre></td></tr></table></div></figure>

<p>5、命名限制</p>
<ul>
<li><p>由英文大小写字母、数字和底线构成</p>
<ul>
<li>例如，A_3</li>
<li><strong>数字不能开头</strong></li>
</ul>
</li>
<li><p>保留字不可作为命名的名称</p>
<ul>
<li>auto,break,case,char,…,while</li>
</ul>
</li>
</ul>

        <h3 id="整数型别简介"   >
          <a href="#整数型别简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#整数型别简介" class="headerlink" title="整数型别简介"></a>整数型别简介</h3>
      <p>1、整数的溢位 Overflow</p>

        <h3 id="浮点数型别简介"   >
          <a href="#浮点数型别简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#浮点数型别简介" class="headerlink" title="浮点数型别简介"></a>浮点数型别简介</h3>
      <p>1、实数表示法</p>
<ul>
<li>使用约略值</li>
</ul>
<p>2、浮点数 Floating Point</p>
<ul>
<li><p>缺点：只表示约略值</p>
</li>
<li><p>优点1：可以自然地表示小数</p>
</li>
<li><p>优点2：比较不容易溢位</p>
</li>
</ul>

        <h3 id="将printf或scanf用在不同资料型别"   >
          <a href="#将printf或scanf用在不同资料型别" class="heading-link"><i class="fas fa-link"></i></a><a href="#将printf或scanf用在不同资料型别" class="headerlink" title="将printf或scanf用在不同资料型别"></a>将printf或scanf用在不同资料型别</h3>
      <ul>
<li>printf是做标准输出的一个内建函式</li>
</ul>
<p>1、printf的格式字串</p>
<ul>
<li>类似字元跳脱的方法，放置<strong>格式符</strong>来输出特定格式的资料</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> sum = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sum is %d.&quot;</span>,sum);	(*)</span><br><span class="line"></span><br><span class="line">(*) 格式符以%开头</span><br></pre></td></tr></table></div></figure>

<p>2、用printf输出整数时常见的格式符</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="left">格式符</th>
<th align="center">输出字符</th>
</tr>
</thead>
<tbody><tr>
<td align="left">d</td>
<td align="center">十进位有号整数</td>
</tr>
<tr>
<td align="left">u</td>
<td align="center">十进位无号整数</td>
</tr>
<tr>
<td align="left">o</td>
<td align="center">八进位无号整数</td>
</tr>
<tr>
<td align="left">x</td>
<td align="center">十六进位无号整数(小写)</td>
</tr>
<tr>
<td align="left">X</td>
<td align="center">十六进位无号整数(大写)</td>
</tr>
<tr>
<td align="left">f</td>
<td align="center">十进位浮点数</td>
</tr>
</tbody></table></div>
<p>3、scanf的使用</p>
<ul>
<li>scanf是做标准输入的一个内建函式</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(要读入的资料格式，变数位址);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br></pre></td></tr></table></div></figure>

<p>4、scanf的格式字串</p>
<ul>
<li>类似字元跳脱的方法，放置<strong>格式符</strong>来输出特定格式的资料</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br></pre></td></tr></table></div></figure>



        <h3 id="整数与浮点数型别间的转换"   >
          <a href="#整数与浮点数型别间的转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#整数与浮点数型别间的转换" class="headerlink" title="整数与浮点数型别间的转换"></a>整数与浮点数型别间的转换</h3>
      <p>1、计算平均</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a,b,c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please entry the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please entry the second number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please entry the third number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c);</span><br><span class="line">	<span class="type">double</span> average = (a + b + c)/<span class="number">3.</span>;	(*)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Average is %f.\n&quot;</span>,average);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>————————————————————</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">(*) <span class="type">double</span> average = (a + b + c) / <span class="number">3</span>;</span><br><span class="line">					(<span class="type">int</span>+<span class="type">int</span>+<span class="type">int</span>)/<span class="type">int</span></span><br><span class="line"></span><br><span class="line">(*) 隐性转型：</span><br><span class="line"><span class="type">double</span> average =             / <span class="number">3.</span>;</span><br><span class="line">           (<span class="type">double</span>)			/(<span class="type">double</span>)</span><br></pre></td></tr></table></div></figure>

<p>2、字面常数 Literal Constant</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">常见字面常数</th>
<th align="center">型别</th>
</tr>
</thead>
<tbody><tr>
<td align="center">123</td>
<td align="center">int,long int</td>
</tr>
<tr>
<td align="center">123.45</td>
<td align="center">double</td>
</tr>
<tr>
<td align="center">123.45f</td>
<td align="center">float</td>
</tr>
</tbody></table></div>
<p>3、<strong>隐性转型与显性转型</strong></p>
<ul>
<li><p>隐型转型是运算需要时自动发生的</p>
</li>
<li><p>显性转型是有需要时强加的</p>
<ul>
<li>double x = (a + b + c) / (double) 3; </li>
</ul>
</li>
</ul>

        <h3 id="字元型别简介"   >
          <a href="#字元型别简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#字元型别简介" class="headerlink" title="字元型别简介"></a>字元型别简介</h3>
      <p>1、储存字元</p>
<p>(1) 编码 Encoding</p>
<ul>
<li>给每种字元一个独一无二的编号</li>
</ul>

        <h3 id="字元编码简介"   >
          <a href="#字元编码简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#字元编码简介" class="headerlink" title="字元编码简介"></a>字元编码简介</h3>
      <p>1、ASCII</p>

        <h3 id="使用char字元型别"   >
          <a href="#使用char字元型别" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用char字元型别" class="headerlink" title="使用char字元型别"></a>使用char字元型别</h3>
      <p>1、C语言两种字元型别</p>
<p>(1) char</p>
<ul>
<li><p>占用1Byte</p>
</li>
<li><p>常见的使用ASCII编码</p>
</li>
<li><p>是一种<strong>整数</strong>编码</p>
</li>
<li><p>用一组<strong>单引号</strong>括住</p>
<ul>
<li>例如,’A’、’\n’</li>
</ul>
</li>
</ul>
<p>(2) wchar_t</p>
<p><em>wchar_t使用在*<em>宽字元</em></em></p>
<p>2、使用char型别</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="char型别的运算"   >
          <a href="#char型别的运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#char型别的运算" class="headerlink" title="char型别的运算"></a>char型别的运算</h3>
      <p>1、大写转小写练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> ch1,ch2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please entry the word:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch1);</span><br><span class="line">	ch2 = ch1 + <span class="number">32</span>;		(*)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure>
<p>————————————————————</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">(*) 方法<span class="number">2</span>：</span><br><span class="line">	ch2 = ch1 + (<span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>);	</span><br></pre></td></tr></table></div></figure>



        <h3 id="选择型别"   >
          <a href="#选择型别" class="heading-link"><i class="fas fa-link"></i></a><a href="#选择型别" class="headerlink" title="选择型别"></a>选择型别</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">选择型别</th>
<th align="center">scanf格式符</th>
<th align="center">printf格式符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">int</td>
<td align="center">%d</td>
<td align="center">%d</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">%lf</td>
<td align="center">%f</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">%c</td>
<td align="center">%c</td>
</tr>
</tbody></table></div>

        <h2 id="运算与表示式"   >
          <a href="#运算与表示式" class="heading-link"><i class="fas fa-link"></i></a><a href="#运算与表示式" class="headerlink" title="运算与表示式"></a>运算与表示式</h2>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> + <span class="number">5</span> * <span class="number">2</span></span><br><span class="line">————————————————————</span><br><span class="line">运算元 Operand：<span class="number">3</span>、<span class="number">5</span>、<span class="number">2</span></span><br><span class="line">运算子 operator：+、*</span><br><span class="line">表示式 Expression：<span class="number">3</span> + <span class="number">5</span> * <span class="number">2</span></span><br></pre></td></tr></table></div></figure>



        <h3 id="整数与浮点数的算术运算"   >
          <a href="#整数与浮点数的算术运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#整数与浮点数的算术运算" class="headerlink" title="整数与浮点数的算术运算"></a>整数与浮点数的算术运算</h3>
      <p>1、常见的算术运算</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">运算子</th>
<th align="center">优先级</th>
<th align="center">运算顺序</th>
</tr>
</thead>
<tbody><tr>
<td align="center">加+</td>
<td align="center">2</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td align="center">减-</td>
<td align="center">2</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td align="center">乘x</td>
<td align="center">1</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td align="center">除/</td>
<td align="center">1</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td align="center">取余%</td>
<td align="center">1</td>
<td align="center">由左至右</td>
</tr>
</tbody></table></div>
<ul>
<li><p>取余%</p>
<ul>
<li>只能用于整数间运算，不能用于浮点数间运算</li>
</ul>
</li>
</ul>

        <h3 id="赋值运算"   >
          <a href="#赋值运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h3>
      <p>1、赋值运算子=</p>
<ul>
<li>将右边的值赋值给左边的<strong>变数</strong></li>
</ul>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">运算子</th>
<th align="center">优先级</th>
<th align="center">运算顺序</th>
</tr>
</thead>
<tbody><tr>
<td align="center">加+</td>
<td align="center">2</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td align="center">减-</td>
<td align="center">2</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td align="center">乘x</td>
<td align="center">1</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td align="center">除/</td>
<td align="center">1</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td align="center">取余%</td>
<td align="center">1</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td align="center">赋值=</td>
<td align="center">3</td>
<td align="center">由右至左</td>
</tr>
</tbody></table></div>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a,c;</span><br><span class="line">	<span class="type">double</span> b,d;</span><br><span class="line">	a=b=c=d=<span class="number">3</span>+<span class="number">7</span>/<span class="number">2.</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n%f\n%d\n%f\n&quot;</span>,a,b,c,d);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>————————————————————</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">a=<span class="number">6</span></span><br><span class="line">b=<span class="number">6.000000</span></span><br><span class="line">c=<span class="number">6</span></span><br><span class="line">d=<span class="number">6.500000</span></span><br></pre></td></tr></table></div></figure>



        <h3 id="如何表示是非对错"   >
          <a href="#如何表示是非对错" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何表示是非对错" class="headerlink" title="如何表示是非对错"></a>如何表示是非对错</h3>
      <ul>
<li><p>1为真</p>
</li>
<li><p>0为假</p>
</li>
<li><p>‘\0’为假</p>
<ul>
<li>‘\0’为空字元Null Character(编号0号的字元)</li>
</ul>
</li>
</ul>

        <h3 id="等号和关系运算"   >
          <a href="#等号和关系运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#等号和关系运算" class="headerlink" title="等号和关系运算"></a>等号和关系运算</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">运算子</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">大于＞</td>
<td align="center">3 ＞ 5</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">小于＜</td>
<td align="center">3 ＜ 5</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">等于=</td>
<td align="center">3 == 5</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">不等于</td>
<td align="center">3 ！= 5</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">大于等于＞=</td>
<td align="center">3 ＞= 5</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">小于等于＜=</td>
<td align="center">3＜=5</td>
<td align="center">1</td>
</tr>
</tbody></table></div>
<p>Ex:</p>
<ul>
<li><p>Q: 3 &gt; 2 &gt; 1是真或假？</p>
</li>
<li><p>A：(3&gt;2)为1，(1&gt;1)为0，结果为假</p>
</li>
</ul>

        <h3 id="逻辑运算"   >
          <a href="#逻辑运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3>
      <p>1、逻辑运算子</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">运算子</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">而且&amp;&amp;</td>
<td align="center">3 &gt; 5 &amp;&amp; 2 &gt; 1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">或者&#124;&#124;</td>
<td align="center">3 &lt; 5 &#124;&#124; 2 &gt; 3</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">非！</td>
<td align="center">! (3 &gt; 2)</td>
<td align="center">0</td>
</tr>
</tbody></table></div>
<ul>
<li><p>!优先于关系运算子</p>
</li>
<li><p>关系运算子优先于&amp;&amp;、&#124;&#124;</p>
</li>
</ul>

        <h3 id="运算子的优先顺序"   >
          <a href="#运算子的优先顺序" class="heading-link"><i class="fas fa-link"></i></a><a href="#运算子的优先顺序" class="headerlink" title="运算子的优先顺序"></a>运算子的优先顺序</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">顺序|    运算子   | 运算类型 |结合顺序|</span><br><span class="line">—————————————————————————————————————</span><br><span class="line"> <span class="number">1</span> | ！           | 逻辑运算 |由右至左|</span><br><span class="line"> —————————————————————————————————————</span><br><span class="line"> <span class="number">2</span> | *、/、%      |   算术   | 由左 |</span><br><span class="line"> <span class="number">3</span> | +、-         |   运算   | 至右 |</span><br><span class="line">—————————————————————————————————————</span><br><span class="line"> <span class="number">4</span> | &gt;、&lt;、&gt;=、&lt;= |   关系   | 由左 |</span><br><span class="line"> <span class="number">5</span> | ==、！=      |   运算   | 至右 |</span><br><span class="line">————————————————————————————————————</span><br><span class="line"> <span class="number">6</span> | &amp;&amp;           |   逻辑   | 由左 |</span><br><span class="line"> <span class="number">7</span> | ||           |   运算   | 至右 |</span><br><span class="line">————————————————————————————————————</span><br><span class="line"> <span class="number">8</span> | =           | 赋值运算 |由右至左|</span><br></pre></td></tr></table></div></figure>



        <h2 id="程式流程控制"   >
          <a href="#程式流程控制" class="heading-link"><i class="fas fa-link"></i></a><a href="#程式流程控制" class="headerlink" title="程式流程控制"></a>程式流程控制</h2>
      <p>1、流程控制</p>
<ul>
<li><p>无条件地执行一次</p>
<ul>
<li>一般述句</li>
</ul>
</li>
<li><p>有条件地执行一次</p>
<ul>
<li>if述句</li>
</ul>
</li>
<li><p>无条件地重复执行</p>
<ul>
<li>无穷回圈</li>
</ul>
</li>
<li><p>有条件地重复执行</p>
<ul>
<li>while述句</li>
</ul>
</li>
<li><p>计次型重复执行</p>
<ul>
<li>for述句</li>
</ul>
</li>
<li><p>选择型地执行一次</p>
<ul>
<li>switch述句</li>
</ul>
</li>
<li><p>至少执行一次下有条件地重复执行</p>
<ul>
<li>do-while述句</li>
</ul>
</li>
</ul>

        <h3 id="有条件地执行"   >
          <a href="#有条件地执行" class="heading-link"><i class="fas fa-link"></i></a><a href="#有条件地执行" class="headerlink" title="有条件地执行"></a>有条件地执行</h3>
      <ul>
<li><p>if述句</p>
<ul>
<li>if (表示式){程式片段}</li>
</ul>
</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">	<span class="keyword">if</span>(a &gt; <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a is larger than 4.\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="猜数字-使用if述句"   >
          <a href="#猜数字-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#猜数字-使用if述句" class="headerlink" title="猜数字(使用if述句)"></a>猜数字(使用if述句)</h3>
      <p>1、比较大小练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">	<span class="keyword">if</span> (a &gt; <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a is larger than 4.\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a &lt; <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a is smaller than 4.\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a == <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a is equal to 4.\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、猜数字练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> answer = <span class="number">4</span>;</span><br><span class="line">	<span class="type">int</span> guess;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter your guess:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;guess);</span><br><span class="line">	<span class="keyword">if</span> (guess &gt; answer)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Too large!\n&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span> (guess &lt; answer)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Too small!\n&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span> (guess == answer)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Correct!\n&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="满额折扣计算练习-使用if述句"   >
          <a href="#满额折扣计算练习-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#满额折扣计算练习-使用if述句" class="headerlink" title="满额折扣计算练习(使用if述句)"></a>满额折扣计算练习(使用if述句)</h3>
      <p>1、写法一</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number,total;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the number of customers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">300</span> * number &lt; <span class="number">3000</span>)&#123;</span><br><span class="line">		total = <span class="number">300</span> * number;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">300</span> * number &gt;= <span class="number">3000</span>)&#123;</span><br><span class="line">		total = <span class="number">300</span> * number * <span class="number">0.8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Total is %d.\n&quot;</span>,total);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、写法二</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number,total,original;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the number of customers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">	original = number * <span class="number">300</span>;</span><br><span class="line">	<span class="keyword">if</span> (original &lt; <span class="number">3000</span>)&#123;</span><br><span class="line">		total = original;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (original &gt;= <span class="number">3000</span>)&#123;</span><br><span class="line">		total = original * <span class="number">0.8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Total is %d.\n&quot;</span>,total);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、写法三</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number,total;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the number of customers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">	total = number * <span class="number">300</span>;</span><br><span class="line">	<span class="keyword">if</span> (total &gt;= <span class="number">3000</span>)&#123;</span><br><span class="line">		total = total * <span class="number">0.8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Total is %d.\n&quot;</span>,total);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="正三角形判断练习-使用if述句"   >
          <a href="#正三角形判断练习-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#正三角形判断练习-使用if述句" class="headerlink" title="正三角形判断练习(使用if述句)"></a>正三角形判断练习(使用if述句)</h3>
      <ul>
<li>正三角形 Regular Triangle</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> side1,side2,side3;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the lengths:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;side1,&amp;side2,&amp;side3);</span><br><span class="line">	<span class="keyword">if</span> (side1 == side2 &amp;&amp; side2 == side3)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Regular Triangle!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="等腰三角形判断练习"   >
          <a href="#等腰三角形判断练习" class="heading-link"><i class="fas fa-link"></i></a><a href="#等腰三角形判断练习" class="headerlink" title="等腰三角形判断练习"></a>等腰三角形判断练习</h3>
      <ul>
<li>等腰三角形 Isosceles Triangle</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> side1,side2,side3;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the lengths:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;side1,&amp;side2,&amp;side3);</span><br><span class="line">	<span class="keyword">if</span> (side1 == side2 || side2 == side3 || side1 == side3)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Isosceles Triangle!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="直角三角形判断练习"   >
          <a href="#直角三角形判断练习" class="heading-link"><i class="fas fa-link"></i></a><a href="#直角三角形判断练习" class="headerlink" title="直角三角形判断练习"></a>直角三角形判断练习</h3>
      <ul>
<li>直角三角形 Rectangular Triangle</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> side1,side2,side3;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the lengths:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;side1,&amp;side2,&amp;side3);</span><br><span class="line">	<span class="keyword">if</span>(side1 * side1 + side2 * side2 == side3 * side3 ||</span><br><span class="line">	   side1 * side1 + side3 * side3 == side2 * side2 ||</span><br><span class="line">	   side2 * side2 + side3 * side3 == side1 * side1)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Rectangular Triggle!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="三角形种类判断练习"   >
          <a href="#三角形种类判断练习" class="heading-link"><i class="fas fa-link"></i></a><a href="#三角形种类判断练习" class="headerlink" title="三角形种类判断练习"></a>三角形种类判断练习</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a,b,c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the lengths:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">	<span class="keyword">if</span> (a == b &amp;&amp; b == c)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Regular Triangle!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a == b || b == c || a == c)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Isosceles Triangle!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a * a + b * b == c * c ||</span><br><span class="line">	    a * a + c * c == b * b ||</span><br><span class="line">		b * b + c * c == a * a)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Rectangular Triangle!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h2 id="对两个变数求最大值-使用if述句"   >
          <a href="#对两个变数求最大值-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#对两个变数求最大值-使用if述句" class="headerlink" title="对两个变数求最大值(使用if述句)"></a>对两个变数求最大值(使用if述句)</h2>
      <p>1、写法一</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the second number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= b)&#123;</span><br><span class="line">		max = a;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a &lt; b)&#123;</span><br><span class="line">		max = b;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>,max);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、写法二</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the first number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">	max = a;</span><br><span class="line">	<span class="keyword">if</span> (a &lt; b)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>,max);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="对三个变数求最大值-使用if述句"   >
          <a href="#对三个变数求最大值-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#对三个变数求最大值-使用if述句" class="headerlink" title="对三个变数求最大值(使用if述句)"></a>对三个变数求最大值(使用if述句)</h3>
      <p>1、写法一</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter three number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= b &amp;&amp; a &gt;=c)&#123;</span><br><span class="line">		max = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (b &gt;a &amp;&amp; b &gt;= c)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c &gt;a &amp;&amp; c &gt; b)&#123;</span><br><span class="line">		max = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>,max);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、写法二</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter three number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	max = a;</span><br><span class="line">	<span class="keyword">if</span> (max &lt; b)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (max &lt; c)&#123;</span><br><span class="line">		max =c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>,max);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="对四个变数求最大值-使用if述句"   >
          <a href="#对四个变数求最大值-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#对四个变数求最大值-使用if述句" class="headerlink" title="对四个变数求最大值(使用if述句)"></a>对四个变数求最大值(使用if述句)</h3>
      <p>1、写法一</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, d, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter four integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= b &amp;&amp; a &gt;= c &amp;&amp; a &gt;= d)&#123;</span><br><span class="line">		max = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (b &gt; a &amp;&amp; b &gt;= c &amp;&amp; b &gt;= d)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c &gt; a &amp;&amp; c &gt; b &amp;&amp; c &gt;= d)&#123;</span><br><span class="line">		max = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (d &gt; a &amp;&amp; d &gt; b &amp;&amp; d &gt; c)&#123;</span><br><span class="line">		max = d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>,max);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、写法二</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, d, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter four integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">	max = a;</span><br><span class="line">	<span class="keyword">if</span> (b &gt; a &amp;&amp; b &gt;= c &amp;&amp; b &gt;= d)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c &gt; a &amp;&amp; c &gt; b &amp;&amp; c &gt;= d)&#123;</span><br><span class="line">		max = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (d &gt; a &amp;&amp; d &gt; b &amp;&amp; d &gt; c)&#123;</span><br><span class="line">		max = d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>,max);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、写法三</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, d, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter four integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">	max = a;</span><br><span class="line">	<span class="keyword">if</span> (b &gt; max)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c &gt; max)&#123;</span><br><span class="line">		max = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (d &gt; max)&#123;</span><br><span class="line">		max = d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maxmum is %d.\n&quot;</span>,max);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="对多个变数求最小值的练习-使用if述句"   >
          <a href="#对多个变数求最小值的练习-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#对多个变数求最小值的练习-使用if述句" class="headerlink" title="对多个变数求最小值的练习(使用if述句)"></a>对多个变数求最小值的练习(使用if述句)</h3>
      <p>1、对两个变数求最小值</p>
<ul>
<li>写法一</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, min;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter two integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">	<span class="keyword">if</span> (a &lt;= b)&#123;</span><br><span class="line">		min = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (b &lt; a)&#123;</span><br><span class="line">		min = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The minimum is %d.\n&quot;</span>,min);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法二</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, min;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter two integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">	min = a;</span><br><span class="line">	<span class="keyword">if</span> (b &lt; a)&#123;</span><br><span class="line">		min = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The minimum is %d.\n&quot;</span>,min);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、对三个变数求最小值</p>
<ul>
<li>写法一</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, min;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter three integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	<span class="keyword">if</span> ( a &lt;= b &amp;&amp; a &lt;= c)&#123;</span><br><span class="line">		min = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (b &lt; a &amp;&amp; b &lt;= c)&#123;</span><br><span class="line">		min = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c &lt; a &amp;&amp; c &lt; b)&#123;</span><br><span class="line">		min = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法二</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, min;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter three integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	min = a;</span><br><span class="line">	<span class="keyword">if</span> (b &lt; a &amp;&amp; b &lt;= c)&#123;</span><br><span class="line">		min = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c &lt; a &amp;&amp; c &lt; b)&#123;</span><br><span class="line">		min = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="对三个变数求中位数的练习-使用if述句"   >
          <a href="#对三个变数求中位数的练习-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#对三个变数求中位数的练习-使用if述句" class="headerlink" title="对三个变数求中位数的练习(使用if述句)"></a>对三个变数求中位数的练习(使用if述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, med;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter three integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	<span class="keyword">if</span> (b &lt;= a &amp;&amp; a &lt;= c || c &lt;= a &amp;&amp; a &lt;= b)&#123;</span><br><span class="line">		med = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a &lt;= b &amp;&amp; b &lt;= c || c &lt;= b &amp;&amp; b &lt;= a)&#123;</span><br><span class="line">		med = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a &lt;= c &amp;&amp; c &lt;= b || b &lt;= c &amp;&amp; c &lt;= a)&#123;</span><br><span class="line">		med = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The medium is %d.\n&quot;</span>, med);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h2 id="对多个变数排序-使用if述句"   >
          <a href="#对多个变数排序-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#对多个变数排序-使用if述句" class="headerlink" title="对多个变数排序(使用if述句)"></a>对多个变数排序(使用if述句)</h2>
      <p>1、排序</p>
<ul>
<li><p>改变资料存放的位置</p>
</li>
<li><p>使用数值交换的做法</p>
</li>
</ul>

        <h3 id="对两个变数依照大小排序练习-使用if述句"   >
          <a href="#对两个变数依照大小排序练习-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#对两个变数依照大小排序练习-使用if述句" class="headerlink" title="对两个变数依照大小排序练习(使用if述句)"></a>对两个变数依照大小排序练习(使用if述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Before: %d%d\n&quot;</span>, a, b);</span><br><span class="line">	<span class="keyword">if</span> (a &gt; b)&#123;</span><br><span class="line">		t = a;</span><br><span class="line">		a = b;</span><br><span class="line">		b = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After: %d%d\n&quot;</span>, a, b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="对三个变数依照大小排序练习-使用if述句"   >
          <a href="#对三个变数依照大小排序练习-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#对三个变数依照大小排序练习-使用if述句" class="headerlink" title="对三个变数依照大小排序练习(使用if述句)"></a>对三个变数依照大小排序练习(使用if述句)</h3>
      
        <h3 id="用两个变数的数值交换对三个变数做排序-使用if述句"   >
          <a href="#用两个变数的数值交换对三个变数做排序-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#用两个变数的数值交换对三个变数做排序-使用if述句" class="headerlink" title="用两个变数的数值交换对三个变数做排序(使用if述句)"></a>用两个变数的数值交换对三个变数做排序(使用if述句)</h3>
      
        <h3 id="用排序简化三角形判断条件-使用if述句"   >
          <a href="#用排序简化三角形判断条件-使用if述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#用排序简化三角形判断条件-使用if述句" class="headerlink" title="用排序简化三角形判断条件(使用if述句)"></a>用排序简化三角形判断条件(使用if述句)</h3>
      
        <h2 id="if-else述句"   >
          <a href="#if-else述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#if-else述句" class="headerlink" title="if-else述句"></a>if-else述句</h2>
      <p>1、if (表示式) {程式片段一} else {程式片段二}</p>

        <h3 id="二选一的交叉路口"   >
          <a href="#二选一的交叉路口" class="heading-link"><i class="fas fa-link"></i></a><a href="#二选一的交叉路口" class="headerlink" title="二选一的交叉路口"></a>二选一的交叉路口</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> grade;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the grade:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;grade);</span><br><span class="line">	<span class="keyword">if</span> (grade &gt;= <span class="number">60</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Pass.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Fail.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="两个变数比大小的练习-使用if-else述句"   >
          <a href="#两个变数比大小的练习-使用if-else述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#两个变数比大小的练习-使用if-else述句" class="headerlink" title="两个变数比大小的练习(使用if-else述句)"></a>两个变数比大小的练习(使用if-else述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter a and b:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">	<span class="keyword">if</span> (a &gt; b)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a &gt; b\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; b)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a &lt; b\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;a = b\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="猜数字练习-使用if-else述句"   >
          <a href="#猜数字练习-使用if-else述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#猜数字练习-使用if-else述句" class="headerlink" title="猜数字练习(使用if-else述句)"></a>猜数字练习(使用if-else述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> guess;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter your guess:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">	<span class="keyword">if</span> (guess &gt; <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Too large!\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Too small!\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Correct!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="猜数字练习-使用if-else述句-1"   >
          <a href="#猜数字练习-使用if-else述句-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#猜数字练习-使用if-else述句-1" class="headerlink" title="猜数字练习(使用if-else述句)"></a>猜数字练习(使用if-else述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> answer = <span class="number">4</span>, guess;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter your guess:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">	<span class="keyword">if</span> (guess &gt; answer)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Too large!\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; answer)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Too small!\n&quot;</span>)； </span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Correct!\n&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="简易四则运算-使用if-else述句"   >
          <a href="#简易四则运算-使用if-else述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#简易四则运算-使用if-else述句" class="headerlink" title="简易四则运算(使用if-else述句)"></a>简易四则运算(使用if-else述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> num1, num2;</span><br><span class="line">	<span class="type">char</span> op;</span><br><span class="line">	<span class="type">float</span> answer;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%c%d&quot;</span>, &amp;num1, &amp;op, &amp;num2);</span><br><span class="line">	<span class="keyword">if</span> (op == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">		answer = num1 + num2;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">		answer = num1 - num2;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">		answer = num1 * num2;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		answer = (<span class="type">float</span>) (num1 / num2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ANS: %f\n&quot;</span>, answer);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="对多个变数求最大值的练习-使用if-else述句"   >
          <a href="#对多个变数求最大值的练习-使用if-else述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#对多个变数求最大值的练习-使用if-else述句" class="headerlink" title="对多个变数求最大值的练习(使用if-else述句)"></a>对多个变数求最大值的练习(使用if-else述句)</h3>
      <ul>
<li>写法一</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;PLease enter three integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= b &amp;&amp; a &gt;= c)&#123;</span><br><span class="line">		max = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (b &gt; a &amp;&amp; b &gt;= c)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c &gt; a &amp;&amp; c &gt; b)&#123;</span><br><span class="line">		max = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>, max); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法二</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;PLease enter three integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= b &amp;&amp; a &gt;= c)&#123;</span><br><span class="line">		max = a;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt;= a &amp;&amp; b &gt;= c)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= a &amp;&amp; c &gt;= b)&#123;</span><br><span class="line">		max = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>, max); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法三</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;PLease enter three integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= b &amp;&amp; a &gt;= c)&#123;</span><br><span class="line">		max = a;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt;= a &amp;&amp; b &gt;= c)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		max = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>, max); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法四</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c, max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;PLease enter three integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	max = a;</span><br><span class="line">	<span class="keyword">if</span> (b &gt; max)&#123;</span><br><span class="line">		max = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c &gt; max)&#123;</span><br><span class="line">		max = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The maximum is %d.\n&quot;</span>, max); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure>



        <h2 id="Switch述句"   >
          <a href="#Switch述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#Switch述句" class="headerlink" title="Switch述句"></a>Switch述句</h2>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(整数值) &#123;</span><br><span class="line">	<span class="keyword">case</span> 整数常数值:</span><br><span class="line">	程式片段;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">	程式片段;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li><p>可以指定多个不同的case</p>
</li>
<li><p>执行到break为止</p>
</li>
<li><p>可以设定default，在所有case都不符合时执行</p>
</li>
</ul>

        <h3 id="多选一的路口-使用Switch述句"   >
          <a href="#多选一的路口-使用Switch述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#多选一的路口-使用Switch述句" class="headerlink" title="多选一的路口(使用Switch述句)"></a>多选一的路口(使用Switch述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> num1, num2;</span><br><span class="line">	<span class="type">char</span> op;</span><br><span class="line">	<span class="type">float</span> answer;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%c%d&quot;</span>, &amp;num1, &amp;op, &amp;num2);</span><br><span class="line">	<span class="keyword">switch</span> (op)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">			answer = num1 + num2;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">			answer = num1 - num2;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">			answer = num1 * num2;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">			answer = (<span class="type">float</span>) num1 / num2;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ANS: %f.\n&quot;</span>, answer);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="ID查询练习-使用Switch述句"   >
          <a href="#ID查询练习-使用Switch述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#ID查询练习-使用Switch述句" class="headerlink" title="ID查询练习(使用Switch述句)"></a>ID查询练习(使用Switch述句)</h3>
      <p>1、使用if-else述句</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ID: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">	<span class="keyword">if</span> (id == <span class="number">2</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;John.\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == <span class="number">13</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Mary.\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == <span class="number">16</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Amy.\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Not found!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、使用switch述句</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ID: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">	<span class="keyword">switch</span> (id)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;John.\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Mary.\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Amy.\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Not found!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、不同的case共用一个break述句，输出相同的值</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ID: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">	<span class="keyword">switch</span> (id)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;John.\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Mary.\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Amy.\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Not found!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="猜数字练习-使用Switch述句"   >
          <a href="#猜数字练习-使用Switch述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#猜数字练习-使用Switch述句" class="headerlink" title="猜数字练习(使用Switch述句)"></a>猜数字练习(使用Switch述句)</h3>
      <p>1、使用if-else述句</p>
<ul>
<li>猜一次数字</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> answer = <span class="number">4</span>;</span><br><span class="line">	<span class="type">int</span> guess;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the guess:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">	<span class="keyword">if</span> (guess &gt; answer)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Too large!\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; answer)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Too small!\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Correct!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h2 id="While述句"   >
          <a href="#While述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#While述句" class="headerlink" title="While述句"></a>While述句</h2>
      <ul>
<li>无穷回圈</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当表示式成立时，就执行程式片段</span></span><br><span class="line"><span class="keyword">while</span> (表示式) &#123;程式片段&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="有条件地重复执行-使用While述句"   >
          <a href="#有条件地重复执行-使用While述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#有条件地重复执行-使用While述句" class="headerlink" title="有条件地重复执行(使用While述句)"></a>有条件地重复执行(使用While述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (count &lt; <span class="number">3</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">		count = count + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="猜数字练习-使用While述句"   >
          <a href="#猜数字练习-使用While述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#猜数字练习-使用While述句" class="headerlink" title="猜数字练习(使用While述句)"></a>猜数字练习(使用While述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> answer = <span class="number">4</span>;</span><br><span class="line">	<span class="type">int</span> guess;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter your guess:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">	<span class="keyword">while</span> (guess != answer)&#123;</span><br><span class="line">		<span class="keyword">if</span> (guess &gt; answer)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Too large!\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Too small!\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Please enter your guess again:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Correct!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="总共猜了几次的练习-使用While述句"   >
          <a href="#总共猜了几次的练习-使用While述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#总共猜了几次的练习-使用While述句" class="headerlink" title="总共猜了几次的练习(使用While述句)"></a>总共猜了几次的练习(使用While述句)</h3>
      <ul>
<li>写法一</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> answer = <span class="number">4</span>;</span><br><span class="line">	<span class="type">int</span> guess;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter your guess:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">	count = count + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (guess != answer)&#123;</span><br><span class="line">		<span class="keyword">if</span> (guess &gt; answer)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Too large!\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Too small!\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Please enter your guess again:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">		count = count + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Correct!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Count: %d\n&quot;</span>, count);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法二</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> answer = <span class="number">4</span>;</span><br><span class="line">	<span class="type">int</span> guess;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (count == <span class="number">0</span> || guess != answer)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Please enter your guess:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">		count = count + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (guess &gt; answer)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Too large!\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; answer)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Too small!\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Correct!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Count: %d\n&quot;</span>, count);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="求不定个数正整数和的练习-使用While述句"   >
          <a href="#求不定个数正整数和的练习-使用While述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#求不定个数正整数和的练习-使用While述句" class="headerlink" title="求不定个数正整数和的练习(使用While述句)"></a>求不定个数正整数和的练习(使用While述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">int</span> sum;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the numbers (quit: 0) :\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">	<span class="keyword">while</span> (number != <span class="number">0</span>)&#123;</span><br><span class="line">		sum = sum + number;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The sum is %d.\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="求不定个数正整数平均的练习-使用while述句"   >
          <a href="#求不定个数正整数平均的练习-使用while述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#求不定个数正整数平均的练习-使用while述句" class="headerlink" title="求不定个数正整数平均的练习(使用while述句)"></a>求不定个数正整数平均的练习(使用while述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="type">float</span> average;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the numbers (0 : quit) :\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">	<span class="keyword">if</span> (number == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;The average is N/A.\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">while</span> (number != <span class="number">0</span>)&#123;</span><br><span class="line">		sum = sum + number;</span><br><span class="line">		count = count + <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">	&#125;</span><br><span class="line">		average = (<span class="type">float</span>) sum / count;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;The average is %f.\n&quot;</span>, average);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="数数字的练习-使用while述句"   >
          <a href="#数数字的练习-使用while述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#数数字的练习-使用while述句" class="headerlink" title="数数字的练习(使用while述句)"></a>数数字的练习(使用while述句)</h3>
      <p>1、印出1到10</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (number &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, number);</span><br><span class="line">		number = number + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、印出1到N</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="keyword">while</span> (number &lt;= N)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, number);</span><br><span class="line">		number = number + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、印出10到20</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">while</span> (number &lt;= <span class="number">20</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, number);</span><br><span class="line">		number = number + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>4、印出M到N</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number, M, N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the number M:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;M);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the number N:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	number = M;</span><br><span class="line">	<span class="keyword">while</span> (number &lt;= N)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, number);</span><br><span class="line">		number = number + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h2 id="Do-while述句"   >
          <a href="#Do-while述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#Do-while述句" class="headerlink" title="Do-while述句"></a>Do-while述句</h2>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一次，先执行一次程式片段</span></span><br><span class="line"><span class="comment">// 第二次，当表示式成立时，就执行程式片段</span></span><br><span class="line"><span class="keyword">do</span> &#123;程式片段&#125; <span class="keyword">while</span> (表示式);</span><br></pre></td></tr></table></div></figure>


        <h3 id="至少做一次的重复执行-Do-while述句"   >
          <a href="#至少做一次的重复执行-Do-while述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#至少做一次的重复执行-Do-while述句" class="headerlink" title="至少做一次的重复执行(Do-while述句)"></a>至少做一次的重复执行(Do-while述句)</h3>
      <p>1、猜数字练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> answer = <span class="number">4</span>;</span><br><span class="line">	<span class="type">int</span> guess;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Please enter the guess:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">		<span class="keyword">if</span> (guess &gt; answer)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Too large!\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; answer)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Too small!\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Correct!\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (guess != answer);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="复合赋值与递增递减运算"   >
          <a href="#复合赋值与递增递减运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#复合赋值与递增递减运算" class="headerlink" title="复合赋值与递增递减运算"></a>复合赋值与递增递减运算</h3>
      <p>1、复合赋值运算</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">运算子</th>
<th align="center">范例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+=加等于</td>
<td align="center">a += 2 (a = a + 2)</td>
</tr>
<tr>
<td align="center">-=减等于</td>
<td align="center">a -= 2 (a = a - 2)</td>
</tr>
<tr>
<td align="center">*=乘等于</td>
<td align="center">a *= 2 (a = a * 2)</td>
</tr>
<tr>
<td align="center">/=除等于</td>
<td align="center">a /= 2 (a = a / 2)</td>
</tr>
<tr>
<td align="center">%=求余等于</td>
<td align="center">a %= 2 (a = a % 2)</td>
</tr>
</tbody></table></div>
<p>2、递增递减运算</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">运算子</th>
<th align="center">范例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">++递增</td>
<td align="center">a++ (a = a + 1)</td>
</tr>
<tr>
<td align="center">++递增</td>
<td align="center">++a (a = a + 1)</td>
</tr>
<tr>
<td align="center">–递减</td>
<td align="center">a– (a = a - 1)</td>
</tr>
<tr>
<td align="center">–递减</td>
<td align="center">–a (a = a - 1)</td>
</tr>
</tbody></table></div>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">count = count + <span class="number">1</span>;</span><br><span class="line">count += <span class="number">1</span>;</span><br><span class="line">count++;</span><br><span class="line">count + <span class="number">1</span>; <span class="comment">// count本身的值不会被改变</span></span><br></pre></td></tr></table></div></figure>

<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">b = ++a; <span class="comment">// a = 1, b = 1 (先增后用)</span></span><br><span class="line">b = a++; <span class="comment">// a = 2, b = 1</span></span><br></pre></td></tr></table></div></figure>



        <h3 id="消费金额计算的练习-使用switch述句"   >
          <a href="#消费金额计算的练习-使用switch述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#消费金额计算的练习-使用switch述句" class="headerlink" title="消费金额计算的练习(使用switch述句)"></a>消费金额计算的练习(使用switch述句)</h3>
      <ul>
<li>使用者分别输入每个商品的价格，输入0后按下方的售价表进行结算，显示总金额</li>
</ul>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">编号</th>
<th align="center">价格</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">90</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">75</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">83</td>
</tr>
</tbody></table></div>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">		<span class="keyword">switch</span> (id) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>: total += <span class="number">90</span>; <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: total += <span class="number">75</span>; <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: total += <span class="number">83</span>; <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (id != <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Total: %d.\n&quot;</span>, total);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h2 id="For述句"   >
          <a href="#For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#For述句" class="headerlink" title="For述句"></a>For述句</h2>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行初始式。</span></span><br><span class="line"><span class="comment">// 当条件式成立时，执行程式片段。否则就结束回圈。</span></span><br><span class="line"><span class="comment">// 执行回圈式后再回到上一步。</span></span><br><span class="line"><span class="keyword">for</span> (初始式; 条件式; 回圈式) &#123;程式片段&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="计次型的重复执行-使用For述句"   >
          <a href="#计次型的重复执行-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#计次型的重复执行-使用For述句" class="headerlink" title="计次型的重复执行(使用For述句)"></a>计次型的重复执行(使用For述句)</h3>
      <p>1、印出1到10练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= <span class="number">10</span>; count++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="数数字练习-使用For述句"   >
          <a href="#数数字练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#数数字练习-使用For述句" class="headerlink" title="数数字练习(使用For述句)"></a>数数字练习(使用For述句)</h3>
      <p>1、印出1到N练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count, N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the number N:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= N; count++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、印出10到20练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">10</span>; count &lt;= <span class="number">20</span>; count++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、印出M到N练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> M, N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the number M:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;M);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please enter the number N:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = M; count &lt;= N; count++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="数等差数列的练习-使用For述句"   >
          <a href="#数等差数列的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#数等差数列的练习-使用For述句" class="headerlink" title="数等差数列的练习(使用For述句)"></a>数等差数列的练习(使用For述句)</h3>
      <p>1、印出10到1练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">10</span>; count &gt;= <span class="number">1</span>; count--)&#123;</span><br><span class="line">		<span class="type">int</span> number = <span class="number">11</span>-count;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, count, number); <span class="comment">// count = 10, number = 1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、印出1到10间的奇数练习</p>
<ul>
<li>写法一</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= <span class="number">10</span>; count += <span class="number">2</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法二</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= <span class="number">10</span>; count++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、印出1到10间的偶数练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">2</span>; count &lt;= <span class="number">10</span>; count += <span class="number">2</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="数特定条件数列的练习-使用For述句"   >
          <a href="#数特定条件数列的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#数特定条件数列的练习-使用For述句" class="headerlink" title="数特定条件数列的练习(使用For述句)"></a>数特定条件数列的练习(使用For述句)</h3>
      <p>1、印出1到10间不是3的倍数的偶数</p>
<ul>
<li>写法一</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= <span class="number">10</span>; count++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; count % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法二</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">2</span>; count &lt;= <span class="number">10</span>; count += <span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (count % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="求连续整数和的练习-使用For述句"   >
          <a href="#求连续整数和的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#求连续整数和的练习-使用For述句" class="headerlink" title="求连续整数和的练习(使用For述句)"></a>求连续整数和的练习(使用For述句)</h3>
      <p>1、印出1加到100的整数和</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i, sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">		sum += i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、印出1加到N的整数和</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">		sum += i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sum = %d.\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="用文字画横线的练习-使用For述句"   >
          <a href="#用文字画横线的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#用文字画横线的练习-使用For述句" class="headerlink" title="用文字画横线的练习(使用For述句)"></a>用文字画横线的练习(使用For述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= N; count++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="中止重复执行-break与continue述句"   >
          <a href="#中止重复执行-break与continue述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#中止重复执行-break与continue述句" class="headerlink" title="中止重复执行(break与continue述句)"></a>中止重复执行(break与continue述句)</h3>
      <ul>
<li><p>break述句</p>
<ul>
<li>中断目前所属的重复执行述句</li>
</ul>
</li>
<li><p>continue述句</p>
<ul>
<li>在重复执行述句中跳过后面的程式区块</li>
</ul>
</li>
</ul>
<p>1、韩信点兵最大值的练习(使用break述句)</p>
<ul>
<li><p>让使用者输入搜索上限,找出上限内所有答案中最大的值</p>
</li>
<li><p>写法一</p>
</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MAX = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;max);</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">int</span> answer = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (number = max; number &gt;= <span class="number">1</span> &amp;&amp; answer == <span class="number">0</span>; number--)&#123;</span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> == <span class="number">2</span>)&#123;</span><br><span class="line">			answer = number;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (answer != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, answer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法二</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MAX = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;max);</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">for</span> (number = max; number &gt;= <span class="number">1</span>; number--)&#123;</span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> == <span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, number);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="找出所有正因数的练习-使用For述句"   >
          <a href="#找出所有正因数的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#找出所有正因数的练习-使用For述句" class="headerlink" title="找出所有正因数的练习(使用For述句)"></a>找出所有正因数的练习(使用For述句)</h3>
      <ul>
<li><p>N的因数</p>
<ul>
<li>可以整除N的整数 (整除：余数为0)</li>
<li>8的正因数有: 1,2,4,8</li>
</ul>
</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">for</span> (number = <span class="number">1</span>; number &lt;= N; number++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (N % number == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, number);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="韩信点兵的练习"   >
          <a href="#韩信点兵的练习" class="heading-link"><i class="fas fa-link"></i></a><a href="#韩信点兵的练习" class="headerlink" title="韩信点兵的练习"></a>韩信点兵的练习</h3>
      <ul>
<li><p>“今有物，不知其数。三三数之，剩二；五五数之，剩三；七七数之，剩二。问：物几何？答曰：二十三。”——《孙子算经》</p>
</li>
<li><p>中国同余数定理</p>
</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!(number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> == <span class="number">2</span>))&#123;</span><br><span class="line">		++number;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, number);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="有范围的韩信点兵练习-使用For述句"   >
          <a href="#有范围的韩信点兵练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#有范围的韩信点兵练习-使用For述句" class="headerlink" title="有范围的韩信点兵练习(使用For述句)"></a>有范围的韩信点兵练习(使用For述句)</h3>
      <p>1、有上限的韩信点兵练习</p>
<ul>
<li>找出上限内所有的答案</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MAX = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;max);</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">for</span> (number = <span class="number">1</span>; number &lt;= max; number++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> ==<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, number);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、有范围的韩信点兵练习</p>
<ul>
<li>找出上、下限间所有的答案</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> min;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MIN = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;min);</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MAX = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;max);</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">for</span> (number = min; number &lt;= max; number++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> == <span class="number">2</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, number);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、韩信点兵由大印到小的练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> min;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MIN = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;min);</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MAX = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;max);</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">for</span> (number = max; number &gt;= min; number--)&#123;</span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> == <span class="number">2</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, number);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="韩信点兵中的最大值练习-使用For述句"   >
          <a href="#韩信点兵中的最大值练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#韩信点兵中的最大值练习-使用For述句" class="headerlink" title="韩信点兵中的最大值练习(使用For述句)"></a>韩信点兵中的最大值练习(使用For述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MAX = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;max);</span><br><span class="line">	<span class="type">int</span> number = max;</span><br><span class="line">	<span class="type">int</span> answer = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (number = max; number &gt;= <span class="number">1</span> &amp;&amp; answer == <span class="number">0</span>; number--)&#123;</span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> == <span class="number">2</span>)&#123;</span><br><span class="line">			answer = number;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (answer != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d.\n&quot;</span>, answer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="有次数的韩信点兵练习-使用For述句"   >
          <a href="#有次数的韩信点兵练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#有次数的韩信点兵练习-使用For述句" class="headerlink" title="有次数的韩信点兵练习(使用For述句)"></a>有次数的韩信点兵练习(使用For述句)</h3>
      <p>1、韩信点兵找前三小的练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (number = <span class="number">1</span>; number &lt;= <span class="number">1000</span> &amp;&amp; count &lt; <span class="number">3</span>; number++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> == <span class="number">2</span>)&#123;</span><br><span class="line">			count++;</span><br><span class="line">			<span class="keyword">if</span> (count &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, number);	</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、韩信点兵找前三大的练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (number = <span class="number">1000</span>; number &gt;= <span class="number">1</span> &amp;&amp; count &lt; <span class="number">3</span>; number--)&#123;</span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> == <span class="number">2</span>)&#123;</span><br><span class="line">			count++;</span><br><span class="line">			<span class="keyword">if</span> (count &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, number);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、韩信点兵找第三小的练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (number = <span class="number">1</span>; number &lt;= <span class="number">1000</span> &amp;&amp; count &lt; <span class="number">3</span>; number++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; number % <span class="number">5</span> == <span class="number">3</span> &amp;&amp; number % <span class="number">7</span> == <span class="number">2</span>)&#123;</span><br><span class="line">			count++;</span><br><span class="line">			<span class="keyword">if</span> (count == <span class="number">3</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d.\n&quot;</span>, number);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="质数判断练习-使用For述句"   >
          <a href="#质数判断练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#质数判断练习-使用For述句" class="headerlink" title="质数判断练习(使用For述句)"></a>质数判断练习(使用For述句)</h3>
      <ul>
<li><p>质数</p>
<ul>
<li>除了1与本身以外没有其它正因数的正整数</li>
</ul>
</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> isPrime = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">for</span> (number = <span class="number">2</span>; number &lt; N &amp;&amp; isPrime; ++number)&#123;</span><br><span class="line">		<span class="keyword">if</span> (N % number == <span class="number">0</span>)&#123;</span><br><span class="line">			isPrime = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (isPrime)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Yes.\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;No.\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="印出九九乘法表的练习-使用For述句"   >
          <a href="#印出九九乘法表的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#印出九九乘法表的练习-使用For述句" class="headerlink" title="印出九九乘法表的练习(使用For述句)"></a>印出九九乘法表的练习(使用For述句)</h3>
      <ul>
<li>写法一</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; ++j)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d x %d = %d\n&quot;</span>, i, j, i * j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li><p>写法二</p>
<ul>
<li>此写法结果缺少(1 x 1 = 1)</li>
</ul>
</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	<span class="keyword">for</span> (c = <span class="number">1</span>; c &lt;= <span class="number">72</span>; ++c)&#123;</span><br><span class="line">		<span class="type">int</span> i = (c - <span class="number">1</span>) / <span class="number">9</span> + <span class="number">2</span>;</span><br><span class="line">		<span class="type">int</span> j = (c - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d x %d = %d\n&quot;</span>, i, j, i * j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="用文字绘制长方形的练习-使用For述句"   >
          <a href="#用文字绘制长方形的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#用文字绘制长方形的练习-使用For述句" class="headerlink" title="用文字绘制长方形的练习(使用For述句)"></a>用文字绘制长方形的练习(使用For述句)</h3>
      <ul>
<li>输入正整数N，印出N X N个’*’组成的图形</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="用文字绘制空心长方形的练习-使用For述句"   >
          <a href="#用文字绘制空心长方形的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#用文字绘制空心长方形的练习-使用For述句" class="headerlink" title="用文字绘制空心长方形的练习(使用For述句)"></a>用文字绘制空心长方形的练习(使用For述句)</h3>
      <p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i == <span class="number">1</span> || i == N || j == <span class="number">1</span> || j == N)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="用文字绘制三角形的练习-使用For述句"   >
          <a href="#用文字绘制三角形的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#用文字绘制三角形的练习-使用For述句" class="headerlink" title="用文字绘制三角形的练习(使用For述句)"></a>用文字绘制三角形的练习(使用For述句)</h3>
      <p>1、用文字绘制三角形的练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; ++j)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、用文字绘制空心三角形的练习</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= N - <span class="number">3</span>; ++i)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; ++j)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;*\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="基于坐标法用文字绘制三角形-使用For述句"   >
          <a href="#基于坐标法用文字绘制三角形-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#基于坐标法用文字绘制三角形-使用For述句" class="headerlink" title="基于坐标法用文字绘制三角形(使用For述句)"></a>基于坐标法用文字绘制三角形(使用For述句)</h3>
      <p>1、坐标点</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; ++j)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)&quot;</span>, i, j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>2、左对角线(i等于j)</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == j)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>3、左下实心三角形(列i大于行j)</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span> (i &gt;= j)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>4、左下空心三角形</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">1</span> || i == N || i == j)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>5、右下实心三角形(列i小于行j)</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span> (i + j &gt;= N + <span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>5、右下空心三角形</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == N || j == N || i + j == N + <span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>6、右上空心三角形</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">1</span> || j == N || i == j )&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>7、右上实心三角形(列i小于行j)</p>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;N = &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">1</span> || j == N || i &lt;= j )&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="找简易整数方程式的练习-使用For述句"   >
          <a href="#找简易整数方程式的练习-使用For述句" class="heading-link"><i class="fas fa-link"></i></a><a href="#找简易整数方程式的练习-使用For述句" class="headerlink" title="找简易整数方程式的练习(使用For述句)"></a>找简易整数方程式的练习(使用For述句)</h3>
      <ul>
<li>写法一</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; ++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">30</span>; ++j)&#123;</span><br><span class="line">			<span class="keyword">if</span> (i + j == <span class="number">30</span> &amp;&amp; i * j == <span class="number">221</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d, %d\n&quot;</span>, i, j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>写法二</li>
</ul>
<p>Ex:</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">30</span> / <span class="number">2</span>; ++i)&#123;</span><br><span class="line">		<span class="type">int</span> j = <span class="number">30</span> - i;</span><br><span class="line">		<span class="keyword">if</span> (i * j == <span class="number">221</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d, %d\n&quot;</span>, i, j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



<p>参考资料：</p>
<ul>
<li><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1WJ411H7v2?mid=0&p=1&share_from=ugc&share_medium=android&share_plat=android&share_session_id=4416b920-6c37-4606-8478-6330d1ec1101&share_source=QQ&share_tag=s_i&timestamp=1658578926&unique_k=Ymcefg8" >C语言入门</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="https://feis.studio/#/c" >课程网站</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构教程:Java语言描述(上)</title>
    <url>/2023/01/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%99%E7%A8%8B(Java%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0)(%E4%B8%8A)/</url>
    <content><![CDATA[<ul>
<li><span class="exturl"><a class="exturl__link"   href="http://www.tup.tsinghua.edu.cn/booksCenter/book_08649901.html" >数据结构教程: Java语言描述</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>

        <h2 id="第一章-绪论"   >
          <a href="#第一章-绪论" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2>
      <p>略</p>

        <h2 id="第二章-线性表"   >
          <a href="#第二章-线性表" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h2>
      
        <h3 id="线性表的定义"   >
          <a href="#线性表的定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3>
      <p>略</p>

        <h3 id="线性表的顺序存储结构"   >
          <a href="#线性表的顺序存储结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3>
      
        <h4 id="线性表的顺序存储结构——顺序表"   >
          <a href="#线性表的顺序存储结构——顺序表" class="heading-link"><i class="fas fa-link"></i></a><a href="#线性表的顺序存储结构——顺序表" class="headerlink" title="线性表的顺序存储结构——顺序表"></a>线性表的顺序存储结构——顺序表</h4>
      <ul>
<li>顺序表泛型类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListClass</span> &lt;E&gt;&#123;</span><br><span class="line">    <span class="comment">// 顺序表泛型类</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">initCapacity</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> E[] data;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqListClass</span><span class="params">()</span>&#123;</span><br><span class="line">        data = (E[])<span class="keyword">new</span> <span class="title class_">Object</span>[initCapacity];</span><br><span class="line">        capacity = initCapacity;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 线性表的基本运算算法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="线性表的基本运算算法在顺序表中的实现"   >
          <a href="#线性表的基本运算算法在顺序表中的实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#线性表的基本运算算法在顺序表中的实现" class="headerlink" title="线性表的基本运算算法在顺序表中的实现"></a>线性表的基本运算算法在顺序表中的实现</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListClass</span> &lt;E&gt;&#123;</span><br><span class="line">    <span class="comment">// 顺序表泛型类</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">initCapacity</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> E[] data;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqListClass</span><span class="params">()</span>&#123;</span><br><span class="line">        data = (E[])<span class="keyword">new</span> <span class="title class_">Object</span>[initCapacity];</span><br><span class="line">        capacity = initCapacity;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变顺序表的容量为newCapacity</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateCapacity</span><span class="params">(<span class="type">int</span> newCapacity)</span>&#123;</span><br><span class="line">        E[] newData = (E[])<span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        capacity = newCapacity;</span><br><span class="line">        data = newData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由a整体建立顺序表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createList</span><span class="params">(E[] a)</span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(size == capacity)</span><br><span class="line">                updateCapacity(<span class="number">2</span> * size);</span><br><span class="line">            data[size] = a[i];</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在顺序表的末尾添加一个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == capacity)</span><br><span class="line">            updateCapacity(<span class="number">2</span> * size);</span><br><span class="line">        data[size] = e;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求顺序表的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置顺序表的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> nLen)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nLen &lt; <span class="number">0</span> || nLen &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;设置长度: nLen不在有效范围内&quot;</span>);</span><br><span class="line">        size = nLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回顺序表中序号为i的元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getElem</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; size - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;查找: 位置i不在有效范围内&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (E)data[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置序号为i的元素为e</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setElem</span><span class="params">(<span class="type">int</span> i, E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; size - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;设置: 位置i不在有效范围内&quot;</span>);</span><br><span class="line">        data[i] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找第一个值为e的元素的序号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; size &amp;&amp; !data[i].equals(e))&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= size)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换data[i]和data[j]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">tmp</span> <span class="operator">=</span> data[i];</span><br><span class="line">        data[i] = data[j];</span><br><span class="line">        data[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在顺序表中序号为i的位置上插入元素e</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i, E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;设置: 位置i不在有效范围内&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(size == capacity)</span><br><span class="line">            updateCapacity(<span class="number">2</span> * size);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> size; j &gt; i; j--)</span><br><span class="line">            data[j] = data[j - <span class="number">1</span>];</span><br><span class="line">        data[i] = e;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在顺序表中删除序号为i的位置上的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; size - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;删除: 位置i不在有效范围内&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; size - <span class="number">1</span>; j++)</span><br><span class="line">            data[j] = data[j + <span class="number">1</span>];</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span>(capacity &gt; initCapacity &amp;&amp; size == capacity / <span class="number">4</span>)</span><br><span class="line">            updateCapacity(capacity / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将顺序表转换为字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            ans += data[i].toString() + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        SqListClass&lt;Integer&gt; L = <span class="keyword">new</span> <span class="title class_">SqListClass</span>&lt;Integer&gt;();</span><br><span class="line">        L.createList(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 1 2 3 4 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="顺序表的应用算法示例"   >
          <a href="#顺序表的应用算法示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#顺序表的应用算法示例" class="headerlink" title="顺序表的应用算法示例"></a>顺序表的应用算法示例</h4>
      <ul>
<li>(例题)对于含有n个整数元素的顺序表L，设计一个算法将其中的所有元素逆置</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        SqListClass&lt;Integer&gt; L = <span class="keyword">new</span> <span class="title class_">SqListClass</span>&lt;Integer&gt;();</span><br><span class="line">        L.createList(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 1 2 3 4 5</span></span><br><span class="line">        reverse(L);</span><br><span class="line">        System.out.println(<span class="string">&quot;逆置后的顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 逆置后的顺序表L: 5 4 3 2 1 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(SqListClass&lt;Integer&gt; L)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = L.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            L.swap(i,j);</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)对于整数顺序表L，所有元素值均不相同，设计一个算法将最大值元素与最小值元素交换，例如L=(1，2，3，4，5)，交换后L=(5,2,3,4,1)</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        SqListClass&lt;Integer&gt; L = <span class="keyword">new</span> <span class="title class_">SqListClass</span>&lt;Integer&gt;();</span><br><span class="line">        L.createList(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 1 2 3 4 5</span></span><br><span class="line">        swapMaxMin(L);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后的顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 交换后的顺序表L: 5 2 3 4 1 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swapMaxMin</span><span class="params">(SqListClass&lt;Integer&gt; L)</span>&#123;</span><br><span class="line">        <span class="type">int</span> maxi, mini;</span><br><span class="line">        maxi = mini = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; L.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(L.getElem(i) &gt; L.getElem(maxi))</span><br><span class="line">                maxi = i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(L.getElem(i) &lt; L.getElem(mini))</span><br><span class="line">                mini = i;</span><br><span class="line">        &#125;</span><br><span class="line">        L.swap(maxi,mini);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)假设有一个字符顺序表L，设计一个算法用于删除从序号i开始的k个元素，若成功则返回true，否则返回false。例如L=(‘a’,’b’,’c’,’d’,’e’)，删除i=1开始的k=2个元素后L=(‘a’,’d’,’e’)。</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Character[] a = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">        SqListClass&lt;Character&gt; L = <span class="keyword">new</span> <span class="title class_">SqListClass</span>&lt;&gt;();</span><br><span class="line">        L.createList(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: a b c d e</span></span><br><span class="line">        deleteK1(L,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: a d e</span></span><br><span class="line">        deleteK2(L,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: a e </span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解法1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deleteK1</span><span class="params">(SqListClass&lt;Character&gt; L, <span class="type">int</span> i, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || k &lt; <span class="number">1</span> || i + k &lt; <span class="number">1</span> || i + k &gt; L.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;= i + k - <span class="number">1</span>; j++)</span><br><span class="line">            L.delete(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  解法2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deleteK2</span><span class="params">(SqListClass&lt;Character&gt; L, <span class="type">int</span> i, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || k &lt; <span class="number">1</span> || i + k &lt; <span class="number">1</span> || i + k &gt; L.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + k; j &lt; L.size(); j++)</span><br><span class="line">            L.setElem(j - k, L.getElem(j));</span><br><span class="line">        L.setSize(L.size() - k);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)对于含有n个整数元素的顺序表L，设计一个算法用于删除其中所有值为x的元素，例如L=( 1,2,1,5,1)，若x=1，删除后L=(2,5)</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        SqListClass&lt;Integer&gt; L = <span class="keyword">new</span> <span class="title class_">SqListClass</span>&lt;&gt;();</span><br><span class="line">        L.createList(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 1 2 2 2 1</span></span><br><span class="line">        deleteX1(L, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 2 5</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        L.createList(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 1 2 2 2 1</span></span><br><span class="line">        deleteX2(L, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 2 5</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        L.createList(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 1 2 2 2 1</span></span><br><span class="line">        deleteX3(L, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 2 5</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解法1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteX1</span><span class="params">(SqListClass&lt;Integer&gt; L, Integer x)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.size(); i++)</span><br><span class="line">            <span class="keyword">if</span>(L.getElem(i) != x)&#123;</span><br><span class="line">                L.setElem(k, L.getElem(i));</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        L.setSize(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解法2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteX2</span><span class="params">(SqListClass&lt;Integer&gt; L, Integer x)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(L.getElem(i) != x)</span><br><span class="line">                L.setElem(i - k, L.getElem(i));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                k++;</span><br><span class="line">        &#125;</span><br><span class="line">        L.setSize(L.size() - k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解法3</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteX3</span><span class="params">(SqListClass&lt;Integer&gt; L, Integer x)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> -<span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; L.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(L.getElem(j) != x)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span>(i != j)</span><br><span class="line">                    L.swap(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        L.setSize(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)对于含有n个整数元素的顺序表L，设计一个尽可能高效的算法删除所有相邻重复的元素，即多个相邻重复的元素仅仅保留一个，例如L=(1,2,2,2,1)，删除后L=(1,2,1)</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        SqListClass&lt;Integer&gt; L = <span class="keyword">new</span> <span class="title class_">SqListClass</span>&lt;&gt;();</span><br><span class="line">        L.createList(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 1 2 2 2 1</span></span><br><span class="line">        delSame(L);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L: &quot;</span> + L);   <span class="comment">// 输出: 顺序表L: 1 2 1 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">delSame</span><span class="params">(SqListClass&lt;Integer&gt; L)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i, k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; L.size(); i++)</span><br><span class="line">            <span class="keyword">if</span>(L.getElem(i) != L.getElem(k - <span class="number">1</span>))&#123;</span><br><span class="line">                L.setElem(k,L.getElem(i));</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        L.setSize(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)有两个按元素值递增有序的整数顺序表A和B，设计一个算法将顺序表A和B的全部元素合并到一个递增有序顺序表C中</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        SqListClass&lt;Integer&gt; L1 = <span class="keyword">new</span> <span class="title class_">SqListClass</span>&lt;&gt;();</span><br><span class="line">        L1.createList(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L1: &quot;</span> + L1);   <span class="comment">// 输出: 顺序表L1: 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">        Integer[] b = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        SqListClass&lt;Integer&gt; L2 = <span class="keyword">new</span> <span class="title class_">SqListClass</span>&lt;&gt;();</span><br><span class="line">        L2.createList(b);</span><br><span class="line">        System.out.println(<span class="string">&quot;顺序表L2: &quot;</span> + L2);   <span class="comment">// 输出: 顺序表L2: 6 7 8 9 10</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---二路归并算法如下---&quot;</span>);</span><br><span class="line">        System.out.println(merge2(L1, L2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqListClass&lt;Integer&gt; <span class="title function_">merge2</span><span class="params">(SqListClass&lt;Integer&gt; A, SqListClass&lt;Integer&gt; B)</span>&#123;</span><br><span class="line">        SqListClass&lt;Integer&gt; C = <span class="keyword">new</span> <span class="title class_">SqListClass</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; A.size() &amp;&amp; j &lt; B.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(A.getElem(i) &lt; B.getElem(j))&#123;</span><br><span class="line">                C.add(A.getElem(i));</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                C.add(B.getElem(j));</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; A.size())&#123;</span><br><span class="line">            C.add(B.getElem(i));</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; B.size())&#123;</span><br><span class="line">            C.add(B.getElem(j));</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="顺序表容器——ArrayList"   >
          <a href="#顺序表容器——ArrayList" class="heading-link"><i class="fas fa-link"></i></a><a href="#顺序表容器——ArrayList" class="headerlink" title="顺序表容器——ArrayList"></a>顺序表容器——ArrayList</h4>
      <ul>
<li>(例题)假设递增有序整数顺序表用ArrayList<Integer>对象存放，设计一个将两个递增有序整数顺序表A和B的全部元素合并到一个递增有序整数顺序表C中</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title function_">merge2</span><span class="params">(ArrayList&lt;Integer&gt; A, ArrayList&lt;Integer&gt; B)</span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; C = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; A.size() &amp;&amp; j &lt; B.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(A.get(i) &lt; B.get(j))&#123;</span><br><span class="line">                C.add(A.get(i));</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                C.add(B.get(j));</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; A.size())&#123;</span><br><span class="line">            C.add(A.get(i));</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; B.size())&#123;</span><br><span class="line">            C.add(B.get(j));</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        ArrayList&lt;Integer&gt; A = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(a));</span><br><span class="line">        System.out.println(<span class="string">&quot;A: &quot;</span> + A);</span><br><span class="line">        Integer[] b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">        ArrayList&lt;Integer&gt; B = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;B: &quot;</span> + B);</span><br><span class="line">        System.out.println(<span class="string">&quot;二路归并&quot;</span>);</span><br><span class="line">        ArrayList&lt;Integer&gt; C;</span><br><span class="line">        C = merge2(A, B);</span><br><span class="line">        System.out.println(<span class="string">&quot;C: &quot;</span> + C);</span><br><span class="line">        <span class="comment">// 输出: </span></span><br><span class="line">        <span class="comment">// A: [1, 3, 5, 7]</span></span><br><span class="line">        <span class="comment">//B: [1, 2, 5, 7, 9, 10, 20]</span></span><br><span class="line">        <span class="comment">//二路归并</span></span><br><span class="line">        <span class="comment">//C: [1, 1, 2, 3, 5, 5, 7, 7, 9, 10, 20]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)有若干个学生记录，每个记录包含姓名和年龄，用类ArrayList的对象存放，分别采用上述3种排序方法实现按年龄递增排序，按姓名递增排序和按姓名递减排序</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stud</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Stud&gt;&#123;  <span class="comment">// 学生类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stud</span><span class="params">(String na,<span class="type">int</span> ag)</span>&#123;</span><br><span class="line">        name = na;</span><br><span class="line">        age = ag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        String ans;</span><br><span class="line">        ans = <span class="string">&quot;[&quot;</span> + name + <span class="string">&quot;,&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Stud o)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age.compareTo(o.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;    <span class="comment">// 测试类</span></span><br><span class="line">        List&lt;Stud&gt; L = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Stud&gt;();</span><br><span class="line">        L.add(<span class="keyword">new</span> <span class="title class_">Stud</span>(<span class="string">&quot;John&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        L.add(<span class="keyword">new</span> <span class="title class_">Stud</span>(<span class="string">&quot;Mary&quot;</span>,<span class="number">17</span>));</span><br><span class="line">        L.add(<span class="keyword">new</span> <span class="title class_">Stud</span>(<span class="string">&quot;Smith&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        L.add(<span class="keyword">new</span> <span class="title class_">Stud</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;初始序列: \n &quot;</span> + L);</span><br><span class="line">        Collections.sort(L);        <span class="comment">// 排序方法1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;按年龄递增排序: \n &quot;</span> + L);</span><br><span class="line">        Collections.sort(L, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Stud&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Stud o1, Stud o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;按姓名递增排序: \n &quot;</span> + L);</span><br><span class="line">        L.sort(Comparator.comparing(Stud::getName).reversed());</span><br><span class="line">        System.out.println(<span class="string">&quot;按姓名递减排序: \n&quot;</span> + L);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出:</span></span><br><span class="line">    <span class="comment">// 初始序列:</span></span><br><span class="line">    <span class="comment">// [[John,18], [Mary,17], [Smith,20], [Tom,18]]</span></span><br><span class="line">    <span class="comment">//按年龄递增排序:</span></span><br><span class="line">    <span class="comment">// [[Mary,17], [John,18], [Tom,18], [Smith,20]]</span></span><br><span class="line">    <span class="comment">//按姓名递增排序:</span></span><br><span class="line">    <span class="comment">// [[John,18], [Mary,17], [Smith,20], [Tom,18]]</span></span><br><span class="line">    <span class="comment">//按姓名递减排序:</span></span><br><span class="line">    <span class="comment">//[[Tom,18], [Smith,20], [Mary,17], [John,18]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="线性表的链式存储结构"   >
          <a href="#线性表的链式存储结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3>
      
        <h4 id="线性表的链式存储结构——链表"   >
          <a href="#线性表的链式存储结构——链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#线性表的链式存储结构——链表" class="headerlink" title="线性表的链式存储结构——链表"></a>线性表的链式存储结构——链表</h4>
      
        <h4 id="单链表"   >
          <a href="#单链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4>
      <ul>
<li>单链表结点泛型类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkNode</span> &lt;E&gt;&#123;  <span class="comment">// 单链表结点泛型类</span></span><br><span class="line">    E data;</span><br><span class="line">    LinkNode&lt;E&gt; next;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span>&#123;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(E d)</span>&#123;</span><br><span class="line">        data = d;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>单链表泛型类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkListClass</span> &lt;E&gt;&#123; <span class="comment">// 单链表泛型类</span></span><br><span class="line">    LinkNode&lt;E&gt; head;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkListClass</span><span class="params">()</span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;();</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头插法: 由数组a整体建立单链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createListF</span><span class="params">(E[] a)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">            s = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;(a[i]);</span><br><span class="line">            s.next = head.next;</span><br><span class="line">            head.next = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尾插法: 由数组a整体建立单链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createListR</span><span class="params">(E[] a)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; s,t;</span><br><span class="line">        t = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">            s = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;(a[i]);</span><br><span class="line">            t.next = s;</span><br><span class="line">            t = s;</span><br><span class="line">        &#125;</span><br><span class="line">        t.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回序号为i的结点</span></span><br><span class="line">    <span class="keyword">private</span> LinkNode&lt;E&gt; <span class="title function_">getI</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; p = head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; i)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在单链表的末尾添加一个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; s = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;(e);</span><br><span class="line">        LinkNode&lt;E&gt; p = head;</span><br><span class="line">        <span class="keyword">while</span>(p.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求单链表的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; p = head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置单链表的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> nLen)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> size();</span><br><span class="line">        <span class="keyword">if</span>(nLen &lt; <span class="number">0</span> || nLen &gt; len)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;设置: 长度nLen不在有效范围内&quot;</span>);</span><br><span class="line">        LinkNode&lt;E&gt; p = getI(nLen - <span class="number">1</span>);</span><br><span class="line">        p.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回单链表中序号为i的元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getElem</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> size();</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; len - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;查找: 位置i不在有效范围内&quot;</span>);</span><br><span class="line">        LinkNode&lt;E&gt; p = getI(i);</span><br><span class="line">        <span class="keyword">return</span> (E)p.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置序号为i的元素为e</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setElem</span><span class="params">(<span class="type">int</span> i,E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; size() - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;设置: 位置i不在有效范围内&quot;</span>);</span><br><span class="line">        LinkNode&lt;E&gt; p = getI(i);</span><br><span class="line">        p.data = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找第一个为e的元素的序号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; p = head.next;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; !p.data.equals(e))&#123;</span><br><span class="line">            j++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换序号为i和序号为j的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; p = getI(i);</span><br><span class="line">        LinkNode&lt;E&gt; q = getI(j);</span><br><span class="line">        <span class="type">E</span> <span class="variable">tmp</span> <span class="operator">=</span> p.data;</span><br><span class="line">        p.data = q.data;</span><br><span class="line">        q.data = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在单链表中序号为i的位置上插入元素e</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i,E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; size() - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;插入: 位置i不在有效范围内&quot;</span>);</span><br><span class="line">        LinkNode&lt;E&gt; p = getI(i - <span class="number">1</span>);</span><br><span class="line">        LinkNode&lt;E&gt; s = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;(e);</span><br><span class="line">        s.next = p.next;</span><br><span class="line">        p.next = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在单链表中删除序号为i的位置上的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; size() - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;删除: 位置i不在有效范围内&quot;</span>);</span><br><span class="line">        LinkNode&lt;E&gt; p = getI(i - <span class="number">1</span>);</span><br><span class="line">        p.next = p.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将单链表转换为字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        LinkNode&lt;E&gt; p = head.next;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            ans += p.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="单链表的应用算法设计示例"   >
          <a href="#单链表的应用算法设计示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#单链表的应用算法设计示例" class="headerlink" title="单链表的应用算法设计示例"></a>单链表的应用算法设计示例</h4>
      <ul>
<li>(例题)有一个长度大于2的整数单链表L，设计一个算法查找L的中间位置的元素，例如，L=(1,2,3)，返回元素为2；L=( 1,2,3,4)，返回元素为2</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt; L = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        L.createListR(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表L: &quot;</span> + L);</span><br><span class="line">        System.out.println(<span class="string">&quot;(计数法)中间位置元素: &quot;</span> + middle1(L));   <span class="comment">// 输出: (计数法)中间位置元素: 2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;(快慢指针法)中间位置元素: &quot;</span> + middle2(L));   <span class="comment">// 输出: (快慢指针法)中间位置元素: 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计数法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">middle1</span><span class="params">(LinkListClass&lt;Integer&gt; L)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> L.size();</span><br><span class="line">        LinkNode&lt;Integer&gt; p = L.head.next;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= (n - <span class="number">1</span>) / <span class="number">2</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 快慢指针法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">middle2</span><span class="params">(LinkListClass&lt;Integer&gt; L)</span>&#123;</span><br><span class="line">        LinkNode&lt;Integer&gt; slow = L.head.next;</span><br><span class="line">        LinkNode&lt;Integer&gt; fast = L.head.next;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="literal">null</span> &amp;&amp; fast.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)有一个整数单链表L，其中可能存在多个值相同的结点，设计一个算法查找L中最大值结点的个数</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt; L = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        L.createListR(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表L: &quot;</span> + L);   <span class="comment">// 输出: 单链表L: 1 2 2 3 3 3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值的个数: &quot;</span> + maxCount(L));   <span class="comment">// 输出: 最大值的个数: 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxCount</span><span class="params">(LinkListClass&lt;Integer&gt; L)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        Integer maxe;</span><br><span class="line">        LinkNode&lt;Integer&gt; p = L.head.next;</span><br><span class="line">        maxe = p.data;</span><br><span class="line">        <span class="keyword">while</span>(p.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.next.data &gt; maxe)&#123;</span><br><span class="line">                maxe = p.next.data;</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p.next.data == maxe)</span><br><span class="line">                cnt++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)有一个整数单链表L，其中可能存在多个值相同的结点，设计一个算法删除L中所有最大值的结点</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt; L = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        L.createListR(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表L: &quot;</span> + L);   <span class="comment">// 输出: 单链表L: 1 2 2 3 3 3</span></span><br><span class="line">        deleteMaxNodes(L);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表L: &quot;</span> + L);   <span class="comment">// 输出: 单链表L: 1 2 2 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteMaxNodes</span><span class="params">(LinkListClass&lt;Integer&gt; L)</span>&#123;</span><br><span class="line">        Integer maxe;</span><br><span class="line">        LinkNode&lt;Integer&gt; p = L.head.next,pre;</span><br><span class="line">        maxe = p.data;</span><br><span class="line">        <span class="keyword">while</span>(p.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.next.data &gt; maxe)</span><br><span class="line">                maxe = p.next.data;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = L.head;</span><br><span class="line">        p = pre.next;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.data == maxe)&#123;</span><br><span class="line">                pre.next = p.next;</span><br><span class="line">                p = pre.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = pre.next;</span><br><span class="line">                p = pre.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)有一个整数单链表L，设计一个算法逆置L中的所有结点。例如L=(1,2,3,4,5)，逆置后L=(5,4,3,2,1)</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt; L = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        L.createListR(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表L: &quot;</span> + L);   <span class="comment">// 输出: 单链表L: 1 2 3 4 5</span></span><br><span class="line">        reverse(L);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表L: &quot;</span> + L);   <span class="comment">// 输出: 单链表L: 5 4 3 2 1 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(LinkListClass&lt;Integer&gt; L)</span>&#123;</span><br><span class="line">        LinkNode&lt;Integer&gt; p = L.head.next,q;</span><br><span class="line">        L.head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            q = p.next;</span><br><span class="line">            p.next = L.head.next;</span><br><span class="line">            L.head.next = p;</span><br><span class="line">            p = q;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)有两个整数单链表A和B，设计一个算法将A、B的所有数据结点交替合并起来得到一个整数单链表C</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt;  A = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        A.createListR(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表A: &quot;</span> + A);   <span class="comment">// 输出: 单链表A: 1 3 5 7 9</span></span><br><span class="line">        Integer[] b = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt;  B = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        B.createListR(b);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表B: &quot;</span> + B);   <span class="comment">// 输出: 单链表B: 2 4 6 8 10</span></span><br><span class="line">        System.out.println(<span class="string">&quot;单链表C: &quot;</span> + comb(A, B));   <span class="comment">// 输出: 单链表C: 1 2 3 4 5 6 7 8 9 10 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinkListClass&lt;Integer&gt; <span class="title function_">comb</span><span class="params">(LinkListClass&lt;Integer&gt; A,LinkListClass&lt;Integer&gt; B)</span>&#123;</span><br><span class="line">        LinkListClass&lt;Integer&gt; C = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        LinkNode&lt;Integer&gt; p,q,t;</span><br><span class="line">        p = A.head.next;</span><br><span class="line">        q = B.head.next;</span><br><span class="line">        t = C.head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; q != <span class="literal">null</span>)&#123;</span><br><span class="line">            t.next = p;</span><br><span class="line">            t = p;</span><br><span class="line">            p = p.next;</span><br><span class="line">            t.next = q;</span><br><span class="line">            t = q;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        t.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="literal">null</span>) t.next = p;</span><br><span class="line">        <span class="keyword">if</span>(q != <span class="literal">null</span>) t.next = q;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)有一个含2n个整数的单链表L，设计一个算法将其拆分成两个带头结点的单链表A和B，A中所有元素递增，B中所有元素递减</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt;  L = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        L.createListR(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表L: &quot;</span> + L);   <span class="comment">// 输出: 单链表L: 1 2 3 4 5 6 7</span></span><br><span class="line">        LinkListClass&lt;Integer&gt; A = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        LinkListClass&lt;Integer&gt; B = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        split(L,A,B);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表A: &quot;</span> + A);   <span class="comment">// 输出: 单链表A: 1 3 5 7</span></span><br><span class="line">        System.out.println(<span class="string">&quot;单链表B: &quot;</span> + B);   <span class="comment">// 输出: 单链表B: 6 4 2 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(LinkListClass&lt;Integer&gt; L,LinkListClass&lt;Integer&gt; A,LinkListClass&lt;Integer&gt; B)</span>&#123;</span><br><span class="line">        LinkNode&lt;Integer&gt; p = L.head.next;</span><br><span class="line">        LinkNode&lt;Integer&gt; q = <span class="literal">null</span>,t;</span><br><span class="line">        t = A.head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            t.next = p;</span><br><span class="line">            t = p;</span><br><span class="line">            p = p.next;</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">                q = p.next;</span><br><span class="line">                p.next = B.head.next;</span><br><span class="line">                B.head.next = p;</span><br><span class="line">                p = q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)有两个递增有序整数单链表A和B，设计一个算法采用二路归并方法将A和B的所有结点合并到递增有序单链表C中</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt;  A = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        A.createListR(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表A: &quot;</span> + A);   <span class="comment">// 输出: 单链表A: 1 3 5 7 9</span></span><br><span class="line">        Integer[] b = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt;  B = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        B.createListR(b);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表B: &quot;</span> + B);   <span class="comment">// 输出: 单链表B: 2 4 6 8 10</span></span><br><span class="line">        System.out.println(<span class="string">&quot;单链表C: &quot;</span> + merge2(A, B));   <span class="comment">// 输出: 单链表C: 1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinkListClass&lt;Integer&gt; <span class="title function_">merge2</span><span class="params">(LinkListClass&lt;Integer&gt; A,LinkListClass&lt;Integer&gt; B)</span>&#123;</span><br><span class="line">        LinkNode&lt;Integer&gt; p = A.head.next;</span><br><span class="line">        LinkNode&lt;Integer&gt; q = B.head.next;</span><br><span class="line">        LinkListClass&lt;Integer&gt; C = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        LinkNode&lt;Integer&gt; t = C.head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; q != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.data &lt; q.data)&#123;</span><br><span class="line">                t.next = p;</span><br><span class="line">                t = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t.next = q;</span><br><span class="line">                t = q;</span><br><span class="line">                q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="literal">null</span>) t.next = p;</span><br><span class="line">        <span class="keyword">if</span>(q != <span class="literal">null</span>) t.next = q;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)有两个递增有序整数单链表A和B,假设每个单链表中没有值相同的结点，但两个单链表中存在相同值的结点，设计算法建立一个新的递增有序整数单链表C，其中包括A和B中值相同的结点，要求算法执行后不改变单链表A和B</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt;  A = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        A.createListR(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表A: &quot;</span> + A);   <span class="comment">// 输出: 单链表A: 1 3 5 7 9</span></span><br><span class="line">        Integer[] b = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        LinkListClass&lt;Integer&gt;  B = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        B.createListR(b);</span><br><span class="line">        System.out.println(<span class="string">&quot;单链表B: &quot;</span> + B);   <span class="comment">// 输出: 单链表B: 5 7 9 </span></span><br><span class="line">        System.out.println(<span class="string">&quot;单链表C: &quot;</span> + commNodes(A, B));   <span class="comment">// 输出: 单链表C: 5 7 9 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinkListClass&lt;Integer&gt; <span class="title function_">commNodes</span><span class="params">(LinkListClass&lt;Integer&gt; A,LinkListClass&lt;Integer&gt; B)</span>&#123;</span><br><span class="line">        LinkNode&lt;Integer&gt; p = A.head.next;</span><br><span class="line">        LinkNode&lt;Integer&gt; q = B.head.next;</span><br><span class="line">        LinkListClass&lt;Integer&gt; C = <span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        LinkNode&lt;Integer&gt; t = C.head,s;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; q != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.data &lt; q.data)</span><br><span class="line">                p = p.next;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(q.data &lt; p.data)</span><br><span class="line">                q = q.next;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                s = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;Integer&gt;(p.data);</span><br><span class="line">                t.next = s;</span><br><span class="line">                t = s;</span><br><span class="line">                p = p.next;</span><br><span class="line">                q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="双链表"   >
          <a href="#双链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4>
      
        <h4 id="双链表的应用算法设计示例"   >
          <a href="#双链表的应用算法设计示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#双链表的应用算法设计示例" class="headerlink" title="双链表的应用算法设计示例"></a>双链表的应用算法设计示例</h4>
      
        <h4 id="循环链表"   >
          <a href="#循环链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4>
      
        <h4 id="链表容器——LinkedList"   >
          <a href="#链表容器——LinkedList" class="heading-link"><i class="fas fa-link"></i></a><a href="#链表容器——LinkedList" class="headerlink" title="链表容器——LinkedList"></a>链表容器——LinkedList</h4>
      
        <h2 id="第三章-栈和队列"   >
          <a href="#第三章-栈和队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三章-栈和队列" class="headerlink" title="第三章 栈和队列"></a>第三章 栈和队列</h2>
      
        <h3 id="栈"   >
          <a href="#栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈" class="headerlink" title="栈"></a>栈</h3>
      
        <h4 id="栈的顺序存储结构及其基本运算算法的实现"   >
          <a href="#栈的顺序存储结构及其基本运算算法的实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈的顺序存储结构及其基本运算算法的实现" class="headerlink" title="栈的顺序存储结构及其基本运算算法的实现"></a>栈的顺序存储结构及其基本运算算法的实现</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqStackClass</span> &lt;E&gt;&#123;  <span class="comment">// 顺序栈泛型类</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">initCapacity</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> top;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqStackClass</span><span class="params">()</span> &#123; <span class="comment">// 构造方法，实现data和top的初始化</span></span><br><span class="line">        data = (E[])<span class="keyword">new</span> <span class="title class_">Object</span>[initCapacity];</span><br><span class="line">        capacity = initCapacity;</span><br><span class="line">        top = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateCapacity</span><span class="params">(<span class="type">int</span> newCapacity)</span>&#123;   <span class="comment">// 改变顺序栈的容量为newCapacity</span></span><br><span class="line">        E[] newData = (E[])<span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= top; i++)&#123;</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        capacity = newCapacity;</span><br><span class="line">        data = newData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顺序栈的基本运算算法</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span>&#123;    <span class="comment">// 判断栈是否为空</span></span><br><span class="line">        <span class="type">return</span> <span class="variable">top</span> <span class="operator">=</span>= -<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span>&#123;  <span class="comment">// 元素e进栈</span></span><br><span class="line">        <span class="keyword">if</span>(top == capacity - <span class="number">1</span>)</span><br><span class="line">            updateCapacity(<span class="number">2</span> * (top + <span class="number">1</span>));</span><br><span class="line">        top++;</span><br><span class="line">        data[top] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span>&#123; <span class="comment">// 出栈操作</span></span><br><span class="line">        <span class="keyword">if</span>(empty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E)data[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">if</span>(capacity &gt; initCapacity &amp;&amp; top + <span class="number">1</span> == capacity / <span class="number">4</span>)</span><br><span class="line">            updateCapacity(capacity / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span>&#123;    <span class="comment">// 取栈顶元素</span></span><br><span class="line">        <span class="keyword">if</span>(empty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (E)data[top];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<blockquote>
<p>栈的各种基本运算算法的时间复杂度均为O(1)</p>
</blockquote>

        <h4 id="顺序栈的应用算法设计示例"   >
          <a href="#顺序栈的应用算法设计示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#顺序栈的应用算法设计示例" class="headerlink" title="顺序栈的应用算法设计示例"></a>顺序栈的应用算法设计示例</h4>
      <ul>
<li>设计一个算法，利用顺序栈检查用户输入的表达式中括号是否配对，并用相关数据进行测试</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam3_4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String str)</span>&#123;  <span class="comment">// 判断算法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> e,x;</span><br><span class="line">        SqStackClass&lt;Character&gt; st = <span class="keyword">new</span> <span class="title class_">SqStackClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; str.length())&#123;</span><br><span class="line">            e = str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(e == <span class="string">&#x27;(&#x27;</span> || e == <span class="string">&#x27;[&#x27;</span> || e == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                st.push(e);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(e == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(st.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span>(st.peek() != <span class="string">&#x27;(&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(e == <span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(st.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span>(st.peek() != <span class="string">&#x27;[&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(e == <span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(st.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span>(st.peek() != <span class="string">&#x27;&#123;&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st.empty()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;([)]&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(isMatch(str))&#123;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;中括号是匹配的&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;中括号不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;([])&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(isMatch(str))&#123;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;中括号是匹配的&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;中括号不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>设计一个算法，利用顺序栈判断用户输入的字符串表达式是否为回文，并用相关数据进行测试</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam3_5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        SqStackClass&lt;Character&gt; st = <span class="keyword">new</span> <span class="title class_">SqStackClass</span>();    <span class="comment">// 建立一个顺序栈</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n / <span class="number">2</span>)&#123;</span><br><span class="line">            st.push(str.charAt(i));</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st.pop() != str.charAt(i))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcba&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(isPalindrome(str))&#123;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;是回文&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;不是回文&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;1221&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(isPalindrome(str))&#123;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;是回文&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;不是回文&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>有1~n的n个元素，通过一个栈可以产生多种出栈序列，设计一个算法判断序列b是否为一个合法的出栈序列，给出操作过程，并用相关数据进行测试</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam3_6</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">op</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> cnt;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSerial</span><span class="params">(<span class="type">int</span>[] b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i,j,n = b.length;</span><br><span class="line">        Integer e;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        SqStackClass&lt;Integer&gt; st = <span class="keyword">new</span> <span class="title class_">SqStackClass</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            a[i] = i + <span class="number">1</span>;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st.empty() || (st.peek() != b[j]))&#123;</span><br><span class="line">                st.push(a[i]);</span><br><span class="line">                op += <span class="string">&quot; 元素&quot;</span> + a[i] + <span class="string">&quot;进栈\n&quot;</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                e = st.pop();</span><br><span class="line">                op += <span class="string">&quot; 元素&quot;</span> + e + <span class="string">&quot;出栈\n&quot;</span>;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty() &amp;&amp; st.peek() == b[j])&#123;</span><br><span class="line">            e = st.pop();</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">(<span class="type">int</span>[] b)</span>&#123;  <span class="comment">// 求解算法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b.length; i++)</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span> + b[i]);</span><br><span class="line">        <span class="keyword">if</span>(isSerial(b))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是合法的出栈序列&quot;</span>);</span><br><span class="line">            System.out.println(op);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是合法的出栈序列&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] b = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        solve(b);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] c = &#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        solve(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="栈的链式存储结构及其基本运算算法的实现"   >
          <a href="#栈的链式存储结构及其基本运算算法的实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈的链式存储结构及其基本运算算法的实现" class="headerlink" title="栈的链式存储结构及其基本运算算法的实现"></a>栈的链式存储结构及其基本运算算法的实现</h4>
      <ul>
<li>链栈结点泛型类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkNode</span> &lt;E&gt;&#123;  <span class="comment">// 链栈结点泛型类</span></span><br><span class="line">    E data;</span><br><span class="line">    LinkNode&lt;E&gt; next;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span>&#123;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(E d)</span>&#123;</span><br><span class="line">        data = d;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>链栈泛型类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkStackClass</span> &lt;E&gt;&#123;    <span class="comment">// 链栈泛型类</span></span><br><span class="line">    LinkNode&lt;E&gt; head;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkStackClass</span><span class="params">()</span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;();</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链栈的基本运算算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span>&#123; <span class="comment">// 判断栈是否为空</span></span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span>&#123;  <span class="comment">// 元素e进栈</span></span><br><span class="line">        LinkNode&lt;E&gt; s = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;(e);</span><br><span class="line">        s.next = head.next;</span><br><span class="line">        head.next = s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span>&#123; <span class="comment">// 出栈操作</span></span><br><span class="line">        <span class="keyword">if</span>(empty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E)head.next.data;</span><br><span class="line">        head.next = head.next.next;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span>&#123;    <span class="comment">// 取栈顶元素</span></span><br><span class="line">        <span class="keyword">if</span>(empty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E)head.next.data;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="链栈的应用算法设计示例"   >
          <a href="#链栈的应用算法设计示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#链栈的应用算法设计示例" class="headerlink" title="链栈的应用算法设计示例"></a>链栈的应用算法设计示例</h4>
      <ul>
<li>设计一个算法，逆置链栈st中的所有元素，如链栈st中元素从栈顶到栈底为(1,2,3,4),逆置后为(4,3,2,1)</li>
</ul>
<p>(解题思路)出栈st中   BVFDEWQ所有的元素，并保存到一个数组a中，再将数组a中的所有元素依次进栈</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链栈逆置算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinkStackClass&lt;Integer&gt; <span class="title function_">reverse</span><span class="params">(LinkStackClass&lt;Integer&gt; st)</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MaxSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[MaxSize];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = st.pop();</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            st.push(a[j]);</span><br><span class="line">        <span class="keyword">return</span> st;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>用不带头结点的单链表作为链栈，设计四个基本运算算法</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkStackClass1</span> &lt;E&gt;&#123;   <span class="comment">//  链栈泛型类</span></span><br><span class="line">    LinkNode&lt;E&gt; head;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkStackClass1</span><span class="params">()</span>&#123;</span><br><span class="line">        head = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不带头结点的链栈的基本运算算法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span>&#123; <span class="comment">// 判断栈是否为空</span></span><br><span class="line">        <span class="type">return</span> <span class="variable">head</span> <span class="operator">=</span>= <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span>&#123;  <span class="comment">// 元素e进栈</span></span><br><span class="line">        LinkNode&lt;E&gt; s = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;(e);</span><br><span class="line">        s.next = head;</span><br><span class="line">        head = s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span>&#123; <span class="comment">// 出栈操作</span></span><br><span class="line">        <span class="keyword">if</span>(empty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E)head.data;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span>&#123;    <span class="comment">// 取栈顶元素</span></span><br><span class="line">        <span class="keyword">if</span>(empty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E)head.data;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="Java中的栈容器——Stack"   >
          <a href="#Java中的栈容器——Stack" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java中的栈容器——Stack" class="headerlink" title="Java中的栈容器——Stack"></a>Java中的栈容器——Stack<E></h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stack&lt;String&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;(); <span class="comment">// 建立String栈对象st</span></span><br><span class="line">        st.push(<span class="string">&quot;a&quot;</span>);   <span class="comment">// 进栈顺序: a,b,c,d,e</span></span><br><span class="line">        st.push(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        st.push(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        st.push(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        st.push(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;empty: &quot;</span> + st.empty()); <span class="comment">// 输出: false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;peek: &quot;</span> + st.peek());   <span class="comment">//输出: e</span></span><br><span class="line">        System.out.println(<span class="string">&quot;search(Object o): &quot;</span> + st.search(<span class="string">&quot;a&quot;</span>));  <span class="comment">// 输出: 5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;search(Object o): &quot;</span> + st.search(<span class="string">&quot;e&quot;</span>));  <span class="comment">// 输出: 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;search(Object o): &quot;</span> + st.search(<span class="string">&quot;no&quot;</span>));  <span class="comment">// 输出: -1</span></span><br><span class="line">        <span class="keyword">while</span>(!st.empty())  <span class="comment">// 出栈顺序: e,d,c,b,a</span></span><br><span class="line">            System.out.println(st.pop() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;empty: &quot;</span> + st.empty()); <span class="comment">// 输出: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="第四章-串"   >
          <a href="#第四章-串" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四章-串" class="headerlink" title="第四章 串"></a>第四章 串</h2>
      
        <h3 id="串的顺序存储结构——顺序串"   >
          <a href="#串的顺序存储结构——顺序串" class="heading-link"><i class="fas fa-link"></i></a><a href="#串的顺序存储结构——顺序串" class="headerlink" title="串的顺序存储结构——顺序串"></a>串的顺序存储结构——顺序串</h3>
      <ul>
<li>顺序串类与串的基本运算算法</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqStringClass</span> &lt;E&gt;&#123; <span class="comment">// 顺序串类</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MaxSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">char</span>[] data;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqStringClass</span><span class="params">()</span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">char</span>[MaxSize];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 串的基本运算算法</span></span><br><span class="line">    <span class="keyword">public</span> SqStringClass <span class="title function_">subStr</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;  <span class="comment">// 求子串</span></span><br><span class="line">        <span class="type">SqStringClass</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqStringClass</span>();</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= size || j &lt; <span class="number">0</span> || i + j &gt; size)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; i + j; k++)</span><br><span class="line">            s.data[k - i] = data[k];</span><br><span class="line">        s.size = j;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="顺序串的应用算法设计示例"   >
          <a href="#顺序串的应用算法设计示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#顺序串的应用算法设计示例" class="headerlink" title="顺序串的应用算法设计示例"></a>顺序串的应用算法设计示例</h3>
      <ul>
<li>设计一个算法Strcmp(s,t),以字典顺序比较两个英文字母串s和t的大小，假设两个串均以顺序串存储</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">Strcmp</span><span class="params">(SqStringClass s,SqStringClass t)</span>&#123;</span><br><span class="line">        <span class="type">int</span> comlen;</span><br><span class="line">        <span class="keyword">if</span>(s.size() &lt; t.size())</span><br><span class="line">            comlen = s.size();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            comlen = t.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; comlen; i++)</span><br><span class="line">            <span class="keyword">if</span>(s.data[i] &gt; t.data[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.data[i] &lt; t.data[i])</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(s.size() == t.size())</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.size() &gt; t.size())</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="串的链式存储结构——链串"   >
          <a href="#串的链式存储结构——链串" class="heading-link"><i class="fas fa-link"></i></a><a href="#串的链式存储结构——链串" class="headerlink" title="串的链式存储结构——链串"></a>串的链式存储结构——链串</h3>
      <ul>
<li>链串结点类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkNode</span> &#123; <span class="comment">// 链串结点类型</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    LinkNode next;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span>&#123;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(<span class="type">char</span> ch)</span>&#123;</span><br><span class="line">        data = ch;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>链串类与串的基本运算算法</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkStringClass</span> &#123;  <span class="comment">// 链串类</span></span><br><span class="line">    LinkNode head;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkStringClass</span><span class="params">()</span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">LinkNode</span>();</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 串的基本运算算法</span></span><br><span class="line">    <span class="keyword">public</span> LinkStringClass <span class="title function_">insStr</span><span class="params">(<span class="type">int</span> i,LinkStringClass t)</span>&#123;    <span class="comment">// 串插入</span></span><br><span class="line">        <span class="type">LinkStringClass</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkStringClass</span>();</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; size)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="type">LinkNode</span> <span class="variable">p</span> <span class="operator">=</span> head.next,p1 = t.head.next,q,r;</span><br><span class="line">        r = s.head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; i; k++)&#123;</span><br><span class="line">            q = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(p.data);</span><br><span class="line">            r.next = q;</span><br><span class="line">            r = q;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            q = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(p1.data);</span><br><span class="line">            r.next = q;</span><br><span class="line">            r = q;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            q = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(p.data);</span><br><span class="line">            r.next = q;</span><br><span class="line">            r = q;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        s.size = size + t.size;</span><br><span class="line">        r.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="链串的应用算法设计示例"   >
          <a href="#链串的应用算法设计示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#链串的应用算法设计示例" class="headerlink" title="链串的应用算法设计示例"></a>链串的应用算法设计示例</h3>
      <ul>
<li>(例题)设计一个算法StrEqual(s,t)比较两个链串s、t是否相等</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">StrEqual</span><span class="params">(LinkStringClass s, LinkStringClass t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.size != t.size)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">LinkNode</span> <span class="variable">p</span> <span class="operator">=</span> s.head.next;</span><br><span class="line">        <span class="type">LinkNode</span> <span class="variable">q</span> <span class="operator">=</span> t.head.next;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; q != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.data != q.data)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)以链串为串的存储结构，设计一个算法把一个链串s中最先出现的子串”ab”改为”xyz”，找到并成功替换返回true，否则返回false</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">replace</span><span class="params">(LinkStringClass s)</span>&#123;</span><br><span class="line">        <span class="type">LinkNode</span> <span class="variable">p</span> <span class="operator">=</span> s.head.next,q;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">find</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(p.next != <span class="literal">null</span> &amp;&amp; !find)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.data == <span class="string">&#x27;a&#x27;</span> &amp;&amp; p.next.data == <span class="string">&#x27;b&#x27;</span>)&#123;</span><br><span class="line">                p.data = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">                p.next.data = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">                q = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">                q.next = p.next;</span><br><span class="line">                p.next = q;</span><br><span class="line">                find = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> find;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="第五章-递归"   >
          <a href="#第五章-递归" class="heading-link"><i class="fas fa-link"></i></a><a href="#第五章-递归" class="headerlink" title="第五章 递归"></a>第五章 递归</h2>
      ]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown笔记中的数学公式实现/Formulas in Markdown</title>
    <url>/2022/07/16/Markdown%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[
        <h2 id="介绍"   >
          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2>
      <p>公式插件的安装及使用教程在此：<span class="exturl"><a class="exturl__link"   href="https://shd101wyy.github.io/markdown-preview-enhanced/#/" >Markdown Preview Enhanced</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="示例"   >
          <a href="#示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#示例" class="headerlink" title="示例"></a>示例</h2>
      <p>我是示例：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$f(x) = ax^2 + bx + c$</span><br></pre></td></tr></table></div></figure>]]></content>
      <tags>
        <tag>Markdown</tag>
        <tag>Formula</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构教程:Java语言描述(下)</title>
    <url>/2023/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%99%E7%A8%8BJava%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0(%E4%B8%8B)/</url>
    <content><![CDATA[<ul>
<li><span class="exturl"><a class="exturl__link"   href="http://www.tup.tsinghua.edu.cn/booksCenter/book_08649901.html" >数据结构教程: Java语言描述</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>

        <h2 id="第六章-数组和稀疏矩阵"   >
          <a href="#第六章-数组和稀疏矩阵" class="heading-link"><i class="fas fa-link"></i></a><a href="#第六章-数组和稀疏矩阵" class="headerlink" title="第六章 数组和稀疏矩阵"></a>第六章 数组和稀疏矩阵</h2>
      
        <h2 id="第七章-树和二叉树"   >
          <a href="#第七章-树和二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#第七章-树和二叉树" class="headerlink" title="第七章 树和二叉树"></a>第七章 树和二叉树</h2>
      
        <h3 id="树"   >
          <a href="#树" class="heading-link"><i class="fas fa-link"></i></a><a href="#树" class="headerlink" title="树"></a>树</h3>
      
        <h3 id="二叉树"   >
          <a href="#二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3>
      
        <h4 id="二叉树的概念"   >
          <a href="#二叉树的概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h4>
      <p>略</p>

        <h4 id="二叉树的性质"   >
          <a href="#二叉树的性质" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h4>
      <p>略</p>

        <h4 id="二叉树的存储结构"   >
          <a href="#二叉树的存储结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h4>
      
        <h5 id="二叉树的顺序存储结构"   >
          <a href="#二叉树的顺序存储结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的顺序存储结构" class="headerlink" title="二叉树的顺序存储结构"></a>二叉树的顺序存储结构</h5>
      <ul>
<li>完全二叉树或满二叉树采用顺序存储结构比较合适</li>
</ul>

        <h5 id="二叉树的链式存储结构"   >
          <a href="#二叉树的链式存储结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的链式存储结构" class="headerlink" title="二叉树的链式存储结构"></a>二叉树的链式存储结构</h5>
      <p>这种链式存储结构通常简称为<strong>二叉链</strong></p>
<ul>
<li>二叉链结点类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTNode</span> &lt;E&gt;&#123;    <span class="comment">// 二叉链中的结点类</span></span><br><span class="line">    E data;</span><br><span class="line">    BTNode lChild;</span><br><span class="line">    BTNode rChild;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTNode</span><span class="params">()</span>&#123;</span><br><span class="line">        lChild = rChild = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTNode</span><span class="params">(E d)</span>&#123;</span><br><span class="line">        data = d;</span><br><span class="line">        lChild = rChild = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<blockquote>
<p>整棵二叉树通过根节点b来唯一标识</p>
</blockquote>

        <h4 id="二叉树的递归算法设计"   >
          <a href="#二叉树的递归算法设计" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的递归算法设计" class="headerlink" title="二叉树的递归算法设计"></a>二叉树的递归算法设计</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(BTNode&lt;Character&gt; b)</span>&#123;   <span class="comment">// 二叉链对应递归算法</span></span><br><span class="line">        <span class="keyword">if</span>(b == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> b.data + fun(b.lChild) + fun(b.rChild);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="二叉树的基本运算及其实现"   >
          <a href="#二叉树的基本运算及其实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的基本运算及其实现" class="headerlink" title="二叉树的基本运算及其实现"></a>二叉树的基本运算及其实现</h4>
      <ul>
<li>二叉链类及其基本运算算法的实现</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeClass</span> &lt;E&gt;&#123;   <span class="comment">// 二叉树类</span></span><br><span class="line">    BTNode&lt;Character&gt; b;</span><br><span class="line">    String bStr;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTreeClass</span><span class="params">()</span>&#123;</span><br><span class="line">        b = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 二叉树基本运算算法</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBTree</span><span class="params">(String str)</span>&#123;   <span class="comment">// 创建以b为根节点的二叉链存储结构</span></span><br><span class="line">        Stack&lt;BTNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;BTNode&gt;();</span><br><span class="line">        BTNode&lt;Character&gt; p = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; str.length())&#123;</span><br><span class="line">            ch = str.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span>(ch)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    st.push(p);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    st.pop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">BTNode</span>&lt;Character&gt;(ch);</span><br><span class="line">                    <span class="keyword">if</span>(b == <span class="literal">null</span>)</span><br><span class="line">                        b = p;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(!st.empty())</span><br><span class="line">                                st.peek().lChild = p;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span>(!st.empty())</span><br><span class="line">                                st.peek().rChild = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;   <span class="comment">// 返回二叉链的括号表示串</span></span><br><span class="line">        bStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        toString1(b);</span><br><span class="line">        <span class="keyword">return</span> bStr;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">toString1</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">            bStr += t.data;</span><br><span class="line">            <span class="keyword">if</span>(t.lChild != <span class="literal">null</span> || t.rChild != <span class="literal">null</span>)&#123;</span><br><span class="line">                bStr += <span class="string">&quot;(&quot;</span>;</span><br><span class="line">                toString1(t.lChild);</span><br><span class="line">                <span class="keyword">if</span>(t.rChild != <span class="literal">null</span>)</span><br><span class="line">                    bStr += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">                toString1(t.rChild);</span><br><span class="line">                bStr += <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> BTNode&lt;Character&gt; <span class="title function_">findNode</span><span class="params">(<span class="type">char</span> x)</span>&#123;     <span class="comment">// 查找值为x的结点的算法</span></span><br><span class="line">        <span class="keyword">return</span> findNode1(b,x);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">private</span> BTNode&lt;Character&gt; <span class="title function_">findNode1</span><span class="params">(BTNode&lt;Character&gt; t,<span class="type">char</span> x)</span>&#123;</span><br><span class="line">        BTNode&lt;Character&gt; p;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t.data == x)</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p = findNode1(t.lChild,x);</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> findNode1(t.rChild,x);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span>&#123;   <span class="comment">// 求二叉树高度的算法</span></span><br><span class="line">        <span class="keyword">return</span> height1(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">height1</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="type">int</span> lChildH,rChildH;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            lChildH = height1(t.lChild);</span><br><span class="line">            rChildH = height1(t.rChild);</span><br><span class="line">            <span class="keyword">return</span> Math.max(lChildH,rChildH) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);  <span class="comment">// 输出: A(B(D(,G)),C(E,F))</span></span><br><span class="line">        System.out.println(b.findNode(<span class="string">&#x27;D&#x27;</span>));    <span class="comment">// 输出: Test01.BTNode@1b6d3586</span></span><br><span class="line">        System.out.println(b.height());     <span class="comment">// 输出: 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="二叉树的先序、中序和后序遍历"   >
          <a href="#二叉树的先序、中序和后序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的先序、中序和后序遍历" class="headerlink" title="二叉树的先序、中序和后序遍历"></a>二叉树的先序、中序和后序遍历</h3>
      
        <h4 id="二叉树遍历的概念"   >
          <a href="#二叉树遍历的概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树遍历的概念" class="headerlink" title="二叉树遍历的概念"></a>二叉树遍历的概念</h4>
      <p>略</p>

        <h4 id="先序、中序和后序遍历递归算法"   >
          <a href="#先序、中序和后序遍历递归算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#先序、中序和后序遍历递归算法" class="headerlink" title="先序、中序和后序遍历递归算法"></a>先序、中序和后序遍历递归算法</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder1</span><span class="params">(BTreeClass bt)</span>&#123;   <span class="comment">// 先序遍历的递归算法</span></span><br><span class="line">        preOrder11(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preOrder11</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.print(t.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            preOrder11(t.lChild);</span><br><span class="line">            preOrder11(t.rChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder1</span><span class="params">(BTreeClass bt)</span>&#123;    <span class="comment">// 中序遍历的递归算法</span></span><br><span class="line">        inOrder11(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inOrder11</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">            inOrder11(t.lChild);</span><br><span class="line">            System.out.print(t.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            inOrder11(t.rChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder1</span><span class="params">(BTreeClass bt)</span>&#123;  <span class="comment">// 后序遍历的递归算法</span></span><br><span class="line">        postOrder11(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postOrder11</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">            postOrder11(t.lChild);</span><br><span class="line">            postOrder11(t.rChild);</span><br><span class="line">            System.out.print(t.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先序遍历的递归算法</span></span><br><span class="line">        System.out.print(<span class="string">&quot;先序遍历: &quot;</span>);</span><br><span class="line">        b.preOrder1(b);</span><br><span class="line">        System.out.println();   <span class="comment">// 输出: 先序遍历: A B D G C E F</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中序遍历的递归算法</span></span><br><span class="line">        System.out.print(<span class="string">&quot;中序遍历: &quot;</span>);</span><br><span class="line">        b.inOrder1(b);</span><br><span class="line">        System.out.println();   <span class="comment">// 输出: 中序遍历: D G B A E C F</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后序遍历的递归算法</span></span><br><span class="line">        System.out.print(<span class="string">&quot;后序遍历: &quot;</span>);</span><br><span class="line">        b.postOrder1(b);</span><br><span class="line">        System.out.println();   <span class="comment">// 输出: 后序遍历: G D B E F C A</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="递归遍历算法的应用"   >
          <a href="#递归遍历算法的应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归遍历算法的应用" class="headerlink" title="递归遍历算法的应用"></a>递归遍历算法的应用</h4>
      <ul>
<li>(例题)二叉链存储结构中，设计一个算法求一棵给定二叉树中结点的个数</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D,H))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);</span><br><span class="line">        System.out.print(<span class="string">&quot;基于先序遍历求结点个数: &quot;</span>);</span><br><span class="line">        System.out.println(nodeCount1(b));</span><br><span class="line">        System.out.print(<span class="string">&quot;基于中序遍历求结点个数: &quot;</span>);</span><br><span class="line">        System.out.println(nodeCount2(b));</span><br><span class="line">        System.out.print(<span class="string">&quot;基于后序遍历求结点个数: &quot;</span>);</span><br><span class="line">        System.out.println(nodeCount3(b));</span><br><span class="line">        System.out.print(<span class="string">&quot;递归求解: &quot;</span>);</span><br><span class="line">        System.out.println(nodeCount4(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二叉链中基于先序遍历求结点个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nodeCount1</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodeCount11(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nodeCount11</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="type">int</span> m,n,k;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">        m = nodeCount11(t.lChild);</span><br><span class="line">        n = nodeCount11(t.rChild);</span><br><span class="line">        <span class="keyword">return</span> k + m + n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二叉链中基于中序遍历求结点个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nodeCount2</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodeCount21(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nodeCount21</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="type">int</span> m,n,k;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        m = nodeCount21(t.lChild);</span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">        n = nodeCount21(t.rChild);</span><br><span class="line">        <span class="keyword">return</span> k + m + n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二叉链中基于后序遍历求结点个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nodeCount3</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodeCount31(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nodeCount31</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="type">int</span> m,n,k;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        m = nodeCount31(t.lChild);</span><br><span class="line">        n = nodeCount31(t.rChild);</span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> k + m + n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归求解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nodeCount4</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodeCount41(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nodeCount41</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span>(nodeCount41(t.lChild) + nodeCount41(t.rChild) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)二叉链存储结构中，设计一个算法按从左到右的顺序输出一棵二叉树中的所有叶子结点</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D,H))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);</span><br><span class="line">        System.out.print(<span class="string">&quot;基于先序遍历输出叶子结点: &quot;</span>);</span><br><span class="line">        disPLeaf1(b);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;基于中序遍历输出叶子结点: &quot;</span>);</span><br><span class="line">        disPLeaf2(b);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;基于后序遍历输出叶子结点: &quot;</span>);</span><br><span class="line">        disPLeaf3(b);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;递归求解: &quot;</span>);</span><br><span class="line">        disPLeaf4(b);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于先序遍历输出叶子结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disPLeaf1</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        disPLeaf11(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disPLeaf11</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.lChild == <span class="literal">null</span> &amp;&amp; t.rChild == <span class="literal">null</span>)</span><br><span class="line">                System.out.print(t.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            disPLeaf11(t.lChild);</span><br><span class="line">            disPLeaf11(t.rChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于中序遍历输出叶子结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disPLeaf2</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        disPLeaf21(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disPLeaf21</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">            disPLeaf21(t.lChild);</span><br><span class="line">            <span class="keyword">if</span>(t.lChild == <span class="literal">null</span> &amp;&amp; t.rChild == <span class="literal">null</span>)</span><br><span class="line">                System.out.print(t.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            disPLeaf21(t.rChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于后序遍历输出叶子结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disPLeaf3</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        disPLeaf31(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disPLeaf31</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">            disPLeaf31(t.lChild);</span><br><span class="line">            disPLeaf31(t.rChild);</span><br><span class="line">            <span class="keyword">if</span>(t.lChild == <span class="literal">null</span> &amp;&amp; t.rChild == <span class="literal">null</span>)</span><br><span class="line">                System.out.print(t.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归求解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disPLeaf4</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        disPLeaf41(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">disPLeaf41</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.lChild == <span class="literal">null</span> &amp;&amp; t.rChild == <span class="literal">null</span>)</span><br><span class="line">                System.out.print(t.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                disPLeaf41(t.lChild);</span><br><span class="line">                disPLeaf41(t.rChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)二叉链存储结构中，设计一个算法将二叉树bt1复制到二叉树bt2</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D,H))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);</span><br><span class="line">        System.out.print(<span class="string">&quot;基于先序遍历复制二叉树: &quot;</span>);</span><br><span class="line">        System.out.println(copyBTree1(b));</span><br><span class="line">        System.out.print(<span class="string">&quot;基于后序遍历复制二叉树: &quot;</span>);</span><br><span class="line">        System.out.println(copyBTree2(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于先序遍历复制二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BTreeClass <span class="title function_">copyBTree1</span><span class="params">(BTreeClass bt1)</span>&#123;</span><br><span class="line">        <span class="type">BTreeClass</span> <span class="variable">bt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BTreeClass</span>();</span><br><span class="line">        bt2.b = copyBTree11(bt1.b);</span><br><span class="line">        <span class="keyword">return</span> bt2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BTNode&lt;Character&gt; <span class="title function_">copyBTree11</span><span class="params">(BTNode&lt;Character&gt; t1)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            BTNode&lt;Character&gt; t2 = <span class="keyword">new</span> <span class="title class_">BTNode</span>&lt;Character&gt;(t1.data);</span><br><span class="line">            t2.lChild = copyBTree11(t1.lChild);</span><br><span class="line">            t2.rChild = copyBTree11(t1.rChild);</span><br><span class="line">            <span class="keyword">return</span> t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于后序遍历复制二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BTreeClass <span class="title function_">copyBTree2</span><span class="params">(BTreeClass bt1)</span>&#123;</span><br><span class="line">        <span class="type">BTreeClass</span> <span class="variable">bt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BTreeClass</span>();</span><br><span class="line">        bt2.b = copyBTree21(bt1.b);</span><br><span class="line">        <span class="keyword">return</span> bt2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BTNode&lt;Character&gt; <span class="title function_">copyBTree21</span><span class="params">(BTNode&lt;Character&gt; t1)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            BTNode&lt;Character&gt; l;</span><br><span class="line">            BTNode&lt;Character&gt; r;</span><br><span class="line">            l = copyBTree21(t1.lChild);</span><br><span class="line">            r = copyBTree21(t1.rChild);</span><br><span class="line">            BTNode&lt;Character&gt; t2= <span class="keyword">new</span> <span class="title class_">BTNode</span>&lt;Character&gt;(t1.data);</span><br><span class="line">            t2.lChild = l;</span><br><span class="line">            t2.rChild = r;</span><br><span class="line">            <span class="keyword">return</span> t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)二叉链存储结构中，所有的值都不相同，设计一个算法求二叉树中指定结点值的结点所在的层次(根结点的层次记为1)</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D,H))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D,H))</span></span><br><span class="line">        System.out.println(level1(b, <span class="string">&#x27;B&#x27;</span>)); <span class="comment">// 输出: 2</span></span><br><span class="line">        System.out.println(level2(b,<span class="string">&#x27;B&#x27;</span>)); <span class="comment">// 输出: 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (解法1)求二叉树中指定结点值的结点所在的层次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">level1</span><span class="params">(BTreeClass bt,<span class="type">char</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level11(bt.b,x,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">level11</span><span class="params">(BTNode&lt;Character&gt; t,<span class="type">char</span> x,<span class="type">int</span> h)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t.data == x)</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> level11(t.lChild,x,h + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(l != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> l;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span>(level11(t.rChild,x,h + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (解法2)求二叉树中指定结点值的结点所在的层次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">level2</span><span class="params">(BTreeClass bt,<span class="type">char</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level21(bt.b,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">level21</span><span class="params">(BTNode&lt;Character&gt; t,<span class="type">char</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(t.data == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left1</span> <span class="operator">=</span> (t.lChild == <span class="literal">null</span> ? <span class="number">0</span> : level21(t.lChild,x));</span><br><span class="line">        <span class="type">int</span> <span class="variable">right1</span> <span class="operator">=</span> (t.rChild == <span class="literal">null</span> ? <span class="number">0</span> : level21(t.rChild,x));</span><br><span class="line">        <span class="keyword">if</span>(left1 &lt; <span class="number">1</span> &amp;&amp; right1 &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left1,right1) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)假设一棵二叉树采用顺序存储结构，设计一个算法建立对应的二叉链存储结构</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;#ABCDE#F##GH##I######&quot;</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;二叉链: &quot;</span>);</span><br><span class="line">        System.out.println(trans(sb));  <span class="comment">// 输出: A(B(D,E(G,H)),C(,F(I)))</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BTreeClass <span class="title function_">trans</span><span class="params">(String sb)</span>&#123;</span><br><span class="line">        <span class="type">BTreeClass</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BTreeClass</span>();</span><br><span class="line">        bt.b = trans1(sb,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> bt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BTNode&lt;Character&gt; <span class="title function_">trans1</span><span class="params">(String sb,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; sb.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sb.charAt(i) != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                BTNode&lt;Character&gt; t = <span class="keyword">new</span> <span class="title class_">BTNode</span>&lt;Character&gt;(sb.charAt(i));</span><br><span class="line">                t.lChild = trans1(sb,<span class="number">2</span> * i);</span><br><span class="line">                t.rChild = trans1(sb,<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)假设二叉树采用二叉链存储结构，且所有结点值均不相同，设计一个算法输出值为x的结点的所有祖先</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解法1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> String ans;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">ancestor1</span><span class="params">(BTreeClass bt, <span class="type">char</span> x)</span>&#123;</span><br><span class="line">        ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ancestor11(bt.b, x);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">ancestor11</span><span class="params">(BTNode&lt;Character&gt; t, Character x)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(t.lChild != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.lChild.data == x)&#123;</span><br><span class="line">                ans += t.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t.rChild != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.rChild.data == x)&#123;</span><br><span class="line">                ans += t.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ancestor11(t.lChild, x) || ancestor11(t.rChild, x))&#123;</span><br><span class="line">            ans += t.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D(,G)),C(E,F))</span></span><br><span class="line">        System.out.print(<span class="string">&quot;所有的祖先结点: &quot;</span>);</span><br><span class="line">        System.out.println(ancestor1(b, <span class="string">&#x27;G&#x27;</span>));  <span class="comment">// 输出: 所有的祖先结点: D B A </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解法2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> String ans;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">ancestor2</span><span class="params">(BTreeClass bt, <span class="type">char</span> x)</span>&#123;</span><br><span class="line">        ArrayList&lt;Character&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Character&gt;();</span><br><span class="line">        ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ancestor21(bt.b,x,path);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ancestor21</span><span class="params">(BTNode&lt;Character&gt; t, Character x, ArrayList&lt;Character&gt; path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        path.add(t.data);</span><br><span class="line">        <span class="keyword">if</span>(t.data == x)&#123;</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            ans = path.toString();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ancestor21(t.lChild, x, path);</span><br><span class="line">        ancestor21(t.rChild, x, path);</span><br><span class="line">        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D(,G)),C(E,F))</span></span><br><span class="line">        System.out.print(<span class="string">&quot;所有的祖先结点: &quot;</span>);</span><br><span class="line">        System.out.println(ancestor2(b,<span class="string">&#x27;G&#x27;</span>));   <span class="comment">// 输出: 所有的祖先结点: [A, B, D]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)假设二叉树采用二叉链存储结构，且所有结点值均不相同，设计一个算法求二叉树的宽度(二叉树中结点个数最多的那一层的结点个数)</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MaxLevel</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[MaxLevel];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">width</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        width1(bt.b,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; MaxLevel; i++)</span><br><span class="line">            <span class="keyword">if</span>(ans &lt; w[i])</span><br><span class="line">                ans = w[i];</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">width1</span><span class="params">(BTNode&lt;Character&gt; t,<span class="type">int</span> h)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        w[h]++;</span><br><span class="line">        width1(t.lChild,h + <span class="number">1</span>);</span><br><span class="line">        width1(t.rChild,h + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D,H))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D,H))</span></span><br><span class="line">        System.out.println(width(b));   <span class="comment">// 输出: 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)假设二叉树采用二叉链存储结构，且所有结点值均不相同，设计一个算法求二叉树中第k(1&lt;= k &lt;= 二叉树的高度)层的结点个数</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*输出:</span></span><br><span class="line"><span class="comment">bt: A(B(D(,G)),C(E,F))</span></span><br><span class="line"><span class="comment">第0层结点个数: 0</span></span><br><span class="line"><span class="comment">第1层结点个数: 1</span></span><br><span class="line"><span class="comment">第2层结点个数: 2</span></span><br><span class="line"><span class="comment">第3层结点个数: 3</span></span><br><span class="line"><span class="comment">第4层结点个数: 1</span></span><br><span class="line"><span class="comment">第5层结点个数: 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> cnt;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">kCount1</span><span class="params">(BTreeClass bt,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        kCount11(bt.b,<span class="number">1</span>,k);</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">kCount11</span><span class="params">(BTNode&lt;Character&gt; t,<span class="type">int</span> h,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(h == k)</span><br><span class="line">            cnt++;</span><br><span class="line">        <span class="keyword">if</span>(h &lt; k)&#123;</span><br><span class="line">            kCount11(t.lChild,h + <span class="number">1</span>,k);</span><br><span class="line">            kCount11(t.rChild,h + <span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        <span class="type">BTreeClass</span> <span class="variable">bt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BTreeClass</span>();</span><br><span class="line">        bt.createBTree(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;bt: &quot;</span> + bt.toString());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">            System.out.printf(<span class="string">&quot;第%d层结点个数: %d\n&quot;</span>, i, kCount1(bt, i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="先序、中序和后序遍历非递归算法"   >
          <a href="#先序、中序和后序遍历非递归算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#先序、中序和后序遍历非递归算法" class="headerlink" title="先序、中序和后序遍历非递归算法"></a>先序、中序和后序遍历非递归算法</h4>
      
        <h5 id="先序遍历的非递归算法"   >
          <a href="#先序遍历的非递归算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#先序遍历的非递归算法" class="headerlink" title="先序遍历的非递归算法"></a>先序遍历的非递归算法</h5>
      <ul>
<li>先序遍历的非递归算法1</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先序遍历的非递归算法1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D(,G)),C(E,F))</span></span><br><span class="line">        System.out.print(<span class="string">&quot;先序遍历的非递归算法1: &quot;</span>);</span><br><span class="line">        preOrder2(b);   <span class="comment">// 输出: 先序遍历的非递归算法1: A B D G C E F </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder2</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        preOrder21(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder21</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        Stack&lt;BTNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;BTNode&gt;();</span><br><span class="line">        BTNode&lt;Character&gt; p;</span><br><span class="line">        st.push(t);</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            p = st.pop();</span><br><span class="line">            System.out.print(p.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(p.rChild != <span class="literal">null</span>)</span><br><span class="line">                st.push(p.rChild);</span><br><span class="line">            <span class="keyword">if</span>(p.lChild != <span class="literal">null</span>)</span><br><span class="line">                st.push(p.lChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>先序遍历的非递归算法2</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先序遍历的非递归算法2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D(,G)),C(E,F))</span></span><br><span class="line">        System.out.print(<span class="string">&quot;先序遍历的非递归算法2: &quot;</span>);</span><br><span class="line">        preOrder3(b);   <span class="comment">// 输出: 先序遍历的非递归算法2: A B D G C E F </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder3</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        preOrder31(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder31</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        Stack&lt;BTNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;BTNode&gt;();</span><br><span class="line">        BTNode&lt;Character&gt; p = t;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty() || p != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.print(p.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                st.push(p);</span><br><span class="line">                p = p.lChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!st.empty())&#123;</span><br><span class="line">                p = st.pop();</span><br><span class="line">                p = p.rChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="中序遍历的非递归算法"   >
          <a href="#中序遍历的非递归算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#中序遍历的非递归算法" class="headerlink" title="中序遍历的非递归算法"></a>中序遍历的非递归算法</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中序遍历的非递归算法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D(,G)),C(E,F))</span></span><br><span class="line">        System.out.print(<span class="string">&quot;中序遍历的非递归算法: &quot;</span>);</span><br><span class="line">        inOrder2(b);    <span class="comment">// 输出: 中序遍历的非递归算法: D G B A E C F </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrder2</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        inOrder21(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrder21</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        Stack&lt;BTNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;BTNode&gt;();</span><br><span class="line">        BTNode&lt;Character&gt; p = t;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty() || p != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">                st.push(p);</span><br><span class="line">                p = p.lChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!st.empty())&#123;</span><br><span class="line">                p = st.pop();</span><br><span class="line">                System.out.print(p.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                p = p.rChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="后序遍历的非递归算法"   >
          <a href="#后序遍历的非递归算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#后序遍历的非递归算法" class="headerlink" title="后序遍历的非递归算法"></a>后序遍历的非递归算法</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后序遍历的非递归算法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D(,G)),C(E,F))</span></span><br><span class="line">        System.out.print(<span class="string">&quot;后序遍历的非递归算法: &quot;</span>);</span><br><span class="line">        postOrder2(b);    <span class="comment">// 输出: 后序遍历的非递归算法: G D B E F C A </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postOrder2</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        postOrder21(bt.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postOrder21</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">        Stack&lt;BTNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;BTNode&gt;();</span><br><span class="line">        BTNode&lt;Character&gt; p = t, q;</span><br><span class="line">        <span class="type">boolean</span> flag;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">                st.push(p);</span><br><span class="line">                p = p.lChild;</span><br><span class="line">            &#125;</span><br><span class="line">            q = <span class="literal">null</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span>(!st.empty() &amp;&amp; flag)&#123;</span><br><span class="line">                p = st.peek();</span><br><span class="line">                <span class="keyword">if</span>(p.rChild == q)&#123;</span><br><span class="line">                    System.out.print(p.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    st.pop();</span><br><span class="line">                    q = p;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    p = p.rChild;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span>(!st.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)采用后序遍历非递归算法，输出值为x的结点的所有祖先</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D(,G)),C(E,F))</span></span><br><span class="line">        System.out.print(<span class="string">&quot;后序遍历的非递归算法求所有祖先结点: &quot;</span>);</span><br><span class="line">        System.out.println(ancestor4(b, <span class="string">&#x27;F&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String ans;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">ancestor4</span><span class="params">(BTreeClass bt, <span class="type">char</span> x)</span>&#123;</span><br><span class="line">        ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ancestor41(bt.b, x);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ancestor41</span><span class="params">(BTNode&lt;Character&gt; t, Character x)</span>&#123;</span><br><span class="line">        Stack&lt;BTNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;BTNode&gt;();</span><br><span class="line">        BTNode&lt;Character&gt; p = t, q;</span><br><span class="line">        <span class="type">boolean</span> flag;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">                st.push(p);</span><br><span class="line">                p = p.lChild;</span><br><span class="line">            &#125;</span><br><span class="line">            q = <span class="literal">null</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span>(!st.empty() &amp;&amp; flag)&#123;</span><br><span class="line">                p = st.peek();</span><br><span class="line">                <span class="keyword">if</span>(p.rChild == q)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(p.data == x)&#123;</span><br><span class="line">                        st.pop();</span><br><span class="line">                        <span class="keyword">while</span>(!st.empty())</span><br><span class="line">                            ans += String.valueOf(st.pop().data) + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        st.pop();</span><br><span class="line">                        q = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    p = p.rChild;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span>(!st.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="二叉树的层次遍历"   >
          <a href="#二叉树的层次遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的层次遍历" class="headerlink" title="二叉树的层次遍历"></a>二叉树的层次遍历</h3>
      
        <h4 id="层次遍历过程"   >
          <a href="#层次遍历过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#层次遍历过程" class="headerlink" title="层次遍历过程"></a>层次遍历过程</h4>
      <p>略</p>

        <h4 id="层次遍历算法设计"   >
          <a href="#层次遍历算法设计" class="heading-link"><i class="fas fa-link"></i></a><a href="#层次遍历算法设计" class="headerlink" title="层次遍历算法设计"></a>层次遍历算法设计</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BTreeClass&lt;Character&gt; b = <span class="keyword">new</span> <span class="title class_">BTreeClass</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;A(B(D(,G)),C(E,F))&quot;</span>;</span><br><span class="line">        b.createBTree(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;二叉链b: &quot;</span> + b);   <span class="comment">// 输出: 二叉链b: A(B(D(,G)),C(E,F))</span></span><br><span class="line">        System.out.print(<span class="string">&quot;层次遍历的算法: &quot;</span>);</span><br><span class="line">        levelOrder(b);  <span class="comment">// 输出: 层次遍历的算法: A B C D E F G </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">levelOrder</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">        BTNode&lt;Character&gt; p;</span><br><span class="line">        Queue&lt;BTNode&gt; qu = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;BTNode&gt;();</span><br><span class="line">        qu.offer(bt.b);</span><br><span class="line">        <span class="keyword">while</span>(!qu.isEmpty())&#123;</span><br><span class="line">            p = qu.poll();</span><br><span class="line">            System.out.print(p.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(p.lChild != <span class="literal">null</span>)</span><br><span class="line">                qu.offer(p.lChild);</span><br><span class="line">            <span class="keyword">if</span>(p.rChild != <span class="literal">null</span>)</span><br><span class="line">                qu.offer(p.rChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="层次遍历算法的应用"   >
          <a href="#层次遍历算法的应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#层次遍历算法的应用" class="headerlink" title="层次遍历算法的应用"></a>层次遍历算法的应用</h4>
      <ul>
<li>(例题)采用层次遍历算法，求二叉树中第k(1&lt;= k &lt;= 二叉树的高度)层的结点个数</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></div></figure>

<ul>
<li>(例题)采用层次遍历算法，输出值为x的结点的所有祖先</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="二叉树的构造"   >
          <a href="#二叉树的构造" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的构造" class="headerlink" title="二叉树的构造"></a>二叉树的构造</h3>
      
        <h3 id="线索二叉树"   >
          <a href="#线索二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3>
      
        <h3 id="哈夫曼树"   >
          <a href="#哈夫曼树" class="heading-link"><i class="fas fa-link"></i></a><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3>
      
        <h3 id="二叉树与树、森林之间的转换"   >
          <a href="#二叉树与树、森林之间的转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树与树、森林之间的转换" class="headerlink" title="二叉树与树、森林之间的转换"></a>二叉树与树、森林之间的转换</h3>
      
        <h3 id="树算法设计和并查集"   >
          <a href="#树算法设计和并查集" class="heading-link"><i class="fas fa-link"></i></a><a href="#树算法设计和并查集" class="headerlink" title="树算法设计和并查集"></a>树算法设计和并查集</h3>
      
        <h2 id="第八章-图"   >
          <a href="#第八章-图" class="heading-link"><i class="fas fa-link"></i></a><a href="#第八章-图" class="headerlink" title="第八章 图"></a>第八章 图</h2>
      
        <h2 id="第九章-查找"   >
          <a href="#第九章-查找" class="heading-link"><i class="fas fa-link"></i></a><a href="#第九章-查找" class="headerlink" title="第九章 查找"></a>第九章 查找</h2>
      
        <h2 id="第十章-排序"   >
          <a href="#第十章-排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#第十章-排序" class="headerlink" title="第十章 排序"></a>第十章 排序</h2>
      ]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论笔记</title>
    <url>/2022/06/09/%E6%A6%82%E7%8E%87%E8%AE%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[
        <h2 id="第一节-随机事件与概率"   >
          <a href="#第一节-随机事件与概率" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一节-随机事件与概率" class="headerlink" title="第一节 随机事件与概率"></a>第一节 随机事件与概率</h2>
      
        <h3 id="一、随机试验"   >
          <a href="#一、随机试验" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、随机试验" class="headerlink" title="一、随机试验"></a>一、随机试验</h3>
      <ul>
<li>为了研究随机现象的统计规律性，就要对客观事物进行观察，观察的过程叫<strong>随机试验</strong> <ul>
<li>（1）在相同的条件下试验可以重复进行；</li>
<li>（2）每次试验的结果不止一种，但是试验之前必须明确试验的所有可能结果；</li>
<li>（3）每次试验将会出现什么样的结果是事先无法预知的．</li>
</ul>
</li>
</ul>

        <h3 id="二、样本空间"   >
          <a href="#二、样本空间" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、样本空间" class="headerlink" title="二、样本空间"></a>二、样本空间</h3>
      <ul>
<li>随机试验的一切可能结果组成的集合称为<strong>样本空间</strong>，记为Ω={ω}<ul>
<li>其中ω表示试验的每一个可能结果，又称为<strong>样本点</strong> </li>
</ul>
</li>
</ul>

        <h4 id="三、随机事件"   >
          <a href="#三、随机事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、随机事件" class="headerlink" title="三、随机事件"></a>三、随机事件</h4>
      <ul>
<li>这些在一次试验中可能出现，也可能不出现的一类结果称为<strong>随机事件</strong>，简称为<strong>事件</strong></li>
<li>随机事件通常用大写字母A，B，C，…表示．</li>
</ul>
<p>-注意：</p>
<ol>
<li>任一随机事件A是样本空间Ω的一个子集．</li>
<li>当试验的结果ω属于该子集时，就说事件A发生了．</li>
<li>仅含一个样本点的随机事件称为<strong>基本事件</strong>．</li>
<li>样本空间Ω也是自己的一个子集，所以它也称为一个事件．由于Ω包含所有可能的试验结果，所以Ω在每一次试验中一定发生，又称为<strong>必然事件</strong>．</li>
<li>空集∅也是样本空间Ω的一个子集，所以它也称为一个事件．由于∅中不包含任何元素，所以∅在每一次试验中一定不发生，又称为<strong>不可能事件</strong>．</li>
</ol>

        <h3 id="四、随机事件间的关系与运算"   >
          <a href="#四、随机事件间的关系与运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#四、随机事件间的关系与运算" class="headerlink" title="四、随机事件间的关系与运算"></a>四、随机事件间的关系与运算</h3>
      <ol>
<li>关系</li>
</ol>
<ul>
<li>包含关系：<ul>
<li>事件A发生必然导致事件B发生．</li>
</ul>
</li>
<li>相等关系：<ul>
<li>事件A发生必然导致事件B发生，且B发生必然导致A发生，即A与B是同一个事件．</li>
</ul>
</li>
<li>互斥关系：<ul>
<li>事件A与事件B不可能同时发生．</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">对立事件一定是互斥事件，成立。</span><br><span class="line">反之，不成立。</span><br></pre></td></tr></table></div></figure>



<ol start="2">
<li>运算</li>
</ol>
<ul>
<li>并（A∪B）[也称和事件]：<ul>
<li>事件A与B中至少有一个发生．</li>
</ul>
</li>
<li>交（A∩B/AB）[也称积事件]：<ul>
<li>事件A与B同时发生．</li>
</ul>
</li>
<li>差（A-B）：<ul>
<li>事件A发生且B不发生．</li>
</ul>
</li>
<li>余（）[也称对立事件或逆事件]：<ul>
<li>事件A不发生．</li>
</ul>
</li>
</ul>
<ol start="3">
<li>事件的运算性质</li>
</ol>
<ul>
<li>交换律</li>
<li>结合律</li>
<li>分配律</li>
<li>对偶律</li>
</ul>

        <h2 id="第二节-集合论"   >
          <a href="#第二节-集合论" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二节-集合论" class="headerlink" title="第二节 集合论"></a>第二节 集合论</h2>
      
        <h3 id="一、概率函数"   >
          <a href="#一、概率函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、概率函数" class="headerlink" title="一、概率函数"></a>一、概率函数</h3>
      <ul>
<li>P(A)=1/5</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">P，概率函数</span><br><span class="line">A，事件</span><br><span class="line"></span><br><span class="line">概率函数的自变数是：事件</span><br><span class="line">其中，事件是一种集合</span><br></pre></td></tr></table></div></figure>




        <h3 id="二、集合论名词"   >
          <a href="#二、集合论名词" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、集合论名词" class="headerlink" title="二、集合论名词"></a>二、集合论名词</h3>
      <ul>
<li>元素 Element</li>
<li>集合 Set<ul>
<li>S={1, 2, 3}</li>
</ul>
</li>
<li>子集合 Subset</li>
<li>全集（宇集） Universal Set</li>
<li>空集 Empty Set</li>
<li>交集 Intersection</li>
<li>并集 Union</li>
<li>补集 Complement</li>
<li>差集 Difference</li>
<li>不相交 Disjiont</li>
<li>互斥 Mutually Exclusive</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">1、不相交：两个集合没有重叠部分</span><br><span class="line">2、互斥：（1）建立在不相交的定义之上；</span><br><span class="line">		（2）一组集合中任选两个集合都不相交，则这组集合互斥</span><br></pre></td></tr></table></div></figure>




        <h3 id="三、德摩根定理-De-Morgan’s-Law"   >
          <a href="#三、德摩根定理-De-Morgan’s-Law" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、德摩根定理-De-Morgan’s-Law" class="headerlink" title="三、德摩根定理 De Morgan’s Law"></a>三、德摩根定理 De Morgan’s Law</h3>
      
        <h3 id="概率论名词"   >
          <a href="#概率论名词" class="heading-link"><i class="fas fa-link"></i></a><a href="#概率论名词" class="headerlink" title="概率论名词"></a>概率论名词</h3>
      <ul>
<li>实验 Experiment</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">一个概率实验包含：</span><br><span class="line">（1）步骤 Procedures；</span><br><span class="line">（2）模型 Model；</span><br><span class="line">（3）观察 Observations；</span><br></pre></td></tr></table></div></figure>

<ul>
<li>结果 Outcome</li>
<li><strong>样本空间 Sample Space</strong> : 概率实验中所有可能结果的集合</li>
<li><strong>事件 Event</strong> ：对于实验结果的某种叙述<ul>
<li>概率就是讲实验<strong>结果</strong>符合某种<strong>事件</strong>的机会有多大</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">样本空间=&#123;事件1，事件2，... ，事件n&#125;</span><br><span class="line"></span><br><span class="line">其中，事件=&#123;结果1，结果2，... ，结果n&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>事件空间 Event Space<ul>
<li>定义：包含所有事件的集合</li>
</ul>
</li>
</ul>

        <h3 id="概率公理-Axiom-of-Probability"   >
          <a href="#概率公理-Axiom-of-Probability" class="heading-link"><i class="fas fa-link"></i></a><a href="#概率公理-Axiom-of-Probability" class="headerlink" title="概率公理 Axiom of  Probability"></a>概率公理 Axiom of  Probability</h3>
      
        <h4 id="概率性质1"   >
          <a href="#概率性质1" class="heading-link"><i class="fas fa-link"></i></a><a href="#概率性质1" class="headerlink" title="概率性质1"></a>概率性质1</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">（1）对任何事件A而言，P(A)≥0；[非负]</span><br><span class="line">（2）P（S）=1；[规范]</span><br><span class="line">（3）事件A1,A2,...An互斥，则：</span><br><span class="line">	P（A1∪A2∪...∪An）=P(A1)+P(A2)+...+P(An)；[可列可加]</span><br></pre></td></tr></table></div></figure>


        <h4 id="概率性质2"   >
          <a href="#概率性质2" class="heading-link"><i class="fas fa-link"></i></a><a href="#概率性质2" class="headerlink" title="概率性质2"></a>概率性质2</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">(1) P（∅）=0； （*）</span><br><span class="line">(2) P(A)=P(A-B)+P(AB)；</span><br><span class="line">(3)P(A∪B)=P(A)+P(B)-P(A∩B);</span><br><span class="line">(4)若C1,C2,...,Cn=S，则对任何事件A：P(A)=P(A∩C1)+P(A∩C2)+...+P(A∩Cn);</span><br></pre></td></tr></table></div></figure>

<p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Zy4y1J7vM?p=10" >(4)“切面包”定理：P10</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>（*）证明：</p>
<p>因为S∩∅=∅，所以S与∅互斥</p>
<p>又S=S∪∅，</p>
<p>则P(S)=<strong>P(S∪∅)=P(S)+P(∅)</strong> [ref. 性质3]</p>
<p>所以，P(∅)=0</p>

        <h3 id="条件概率-Conditional-Probability"   >
          <a href="#条件概率-Conditional-Probability" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件概率-Conditional-Probability" class="headerlink" title="条件概率 Conditional Probability"></a>条件概率 Conditional Probability</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">P(X | Y)：</span><br><span class="line">X，对象事件</span><br><span class="line">Y，条件（已发生的事件）</span><br></pre></td></tr></table></div></figure>

<ul>
<li><p>延伸：</p>
<p>​        P(X | Y) = P(X∩Y) / P(Y)</p>
</li>
<li><p>对任何事件X及任何条件事件Y，有：</p>
<ul>
<li>P(X | Y) ≥ 0；</li>
<li>P(Y | Y) = 1；</li>
<li>A，B互斥，P(A∪B | Y) = P(A | Y) + P(B | Y) ;</li>
</ul>
</li>
</ul>

        <h3 id="Total-Probability定理"   >
          <a href="#Total-Probability定理" class="heading-link"><i class="fas fa-link"></i></a><a href="#Total-Probability定理" class="headerlink" title="Total Probability定理"></a>Total Probability定理</h3>
      <ul>
<li><p>若C1，C2，…，Cn互斥，且C1∪C2∪…∪Cn=S,</p>
<p>则对任意事件A，有：</p>
<p>P(A) = P(A | C1)P(C1)+ P(A | C2)P(C2)+…+ P(A | Cn)P(Cn)</p>
</li>
</ul>

        <h3 id="贝叶斯定理-Bayes’-Rule"   >
          <a href="#贝叶斯定理-Bayes’-Rule" class="heading-link"><i class="fas fa-link"></i></a><a href="#贝叶斯定理-Bayes’-Rule" class="headerlink" title="贝叶斯定理 Bayes’ Rule"></a>贝叶斯定理 Bayes’ Rule</h3>
      
        <h3 id="概率的独立性"   >
          <a href="#概率的独立性" class="heading-link"><i class="fas fa-link"></i></a><a href="#概率的独立性" class="headerlink" title="概率的独立性"></a>概率的独立性</h3>
      <ul>
<li>独立事件</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">(1)若两事件A、B的概率满足：</span><br><span class="line">P（A∩B）=P(A)P(B)，</span><br><span class="line">则A、B两事件称为概率上的独立事件;</span><br><span class="line"></span><br><span class="line">(2)P(A | B) = P(A);</span><br></pre></td></tr></table></div></figure>

<ul>
<li>多事件独立</li>
</ul>

        <h3 id="Fundamental-Principle-of-Counting"   >
          <a href="#Fundamental-Principle-of-Counting" class="heading-link"><i class="fas fa-link"></i></a><a href="#Fundamental-Principle-of-Counting" class="headerlink" title="Fundamental Principle of Counting"></a>Fundamental Principle of Counting</h3>
      <ul>
<li><p>判断方式：(1)所有物品是否可以区分；</p>
<p>​                (2)抽中的物品是否可以放回；</p>
<p>​                (3)抽选顺序是否有差异；</p>
</li>
<li><p>排列 Permutation</p>
</li>
<li><p>组合 Combination</p>
</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Q：若有n个数，从中取k个，共有多少结果？</span><br><span class="line">A： (n!)/((n-k)!k!).</span><br><span class="line"></span><br><span class="line">ref:二项式定理的二项式系数 Binomial coefficient</span><br></pre></td></tr></table></div></figure>

<ul>
<li>多项组合 Multinomial</li>
</ul>

        <h3 id="随机变量-Random-Variable（R-V-）"   >
          <a href="#随机变量-Random-Variable（R-V-）" class="heading-link"><i class="fas fa-link"></i></a><a href="#随机变量-Random-Variable（R-V-）" class="headerlink" title="随机变量 Random Variable（R.V.）"></a>随机变量 Random Variable（R.V.）</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">(1) 定义：把实验结果数字化的表示方式；</span><br><span class="line">(2) 通常用大写英文字母表示；</span><br><span class="line">(3) 本质：随机变数是一种函数，X：S ➡ R；</span><br></pre></td></tr></table></div></figure>

<p>根据取值范围的不同，可分为：</p>
<ul>
<li>离散随机变量 Discrete R.V.<ul>
<li>随机变量的取值为有限个或可数个</li>
<li>可数集：正整数集{1，3，5，…}</li>
<li>不可数集：区间[0，1]</li>
<li>贝努利实验：只有两个可能结果的实验</li>
</ul>
</li>
<li>连续随机变量 Continuous R.V.</li>
</ul>

        <h3 id="累积分布函数-Cumulative-Distribution-Function-CDF"   >
          <a href="#累积分布函数-Cumulative-Distribution-Function-CDF" class="heading-link"><i class="fas fa-link"></i></a><a href="#累积分布函数-Cumulative-Distribution-Function-CDF" class="headerlink" title="累积分布函数 Cumulative Distribution Function (CDF)"></a>累积分布函数 Cumulative Distribution Function (CDF)</h3>
      <ul>
<li>计算X落在某个范围内的概率</li>
</ul>

        <h2 id="第二节-常用的离散型随机变量"   >
          <a href="#第二节-常用的离散型随机变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二节-常用的离散型随机变量" class="headerlink" title="第二节 常用的离散型随机变量"></a>第二节 常用的离散型随机变量</h2>
      
        <h3 id="分布函数"   >
          <a href="#分布函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#分布函数" class="headerlink" title="分布函数"></a>分布函数</h3>
      ]]></content>
      <tags>
        <tag>概率论</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>离散数学笔记</title>
    <url>/2022/07/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[
        <h2 id="第1章-命题逻辑"   >
          <a href="#第1章-命题逻辑" class="heading-link"><i class="fas fa-link"></i></a><a href="#第1章-命题逻辑" class="headerlink" title="第1章 命题逻辑"></a>第1章 命题逻辑</h2>
      <ul>
<li>命题 Proposition</li>
<li>逻辑推论 Logical Deduction</li>
<li>公理 Axiom</li>
<li>证明 Proof</li>
</ul>

        <h3 id="命题与联结词"   >
          <a href="#命题与联结词" class="heading-link"><i class="fas fa-link"></i></a><a href="#命题与联结词" class="headerlink" title="命题与联结词"></a>命题与联结词</h3>
      <p>1、命题的概念</p>
<ul>
<li><p><strong>命题</strong>是判断真假的<strong>陈述句</strong></p>
</li>
<li><p>命题符号化：</p>
<ul>
<li>将<strong>自然语言</strong>转化为<strong>命题公式</strong></li>
</ul>
</li>
</ul>
<p>Ex:</p>
<ul>
<li>True: 2 + 3 = 5;</li>
<li>False: 2 - 3 = 5;</li>
</ul>
<p>2、命题分类</p>
<p>(1) 原子命题</p>
<ul>
<li><p>命题标识符：表示原子命题的符号</p>
<ul>
<li>命题常元</li>
<li>命题变元</li>
</ul>
</li>
</ul>
<p>(2) 复合命题</p>
<ul>
<li><p>经<strong>联结词</strong>联结而成</p>
</li>
<li><p>由两个或两个以上原子命题组成的命题</p>
</li>
<li><p>Ex：如果温度在0℃以下，则水会结冰</p>
</li>
</ul>
<p>3、命题联结词</p>
<p>(1) 否定联结词</p>
<ul>
<li>逻辑非</li>
</ul>
<p>(2) 合取联结词</p>
<ul>
<li>逻辑与</li>
<li>“同时取真”关系</li>
</ul>
<p>(3) 析取联结词</p>
<ul>
<li>逻辑或</li>
<li>“选择取真”关系<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">* 相容选择：可兼或(同或)</span><br><span class="line">* 不相容选择: 不可兼或(异或)</span><br></pre></td></tr></table></div></figure></li>
<li><strong>析取词用于“可兼或”</strong></li>
</ul>
<p>(4) 蕴涵联结词</p>
<ul>
<li><p><strong>“除非前真后假”关系：</strong></p>
<ul>
<li>善意推定：只有p为1，且q为0时，p➡q的真值才为0</li>
</ul>
</li>
<li><p>充分条件型蕴涵:</p>
<ul>
<li>如果……则；</li>
<li>只要……就；</li>
<li>一旦……就；</li>
<li>有  ……就；</li>
</ul>
</li>
<li><p>必要条件型蕴涵：**(前件在后，后件在前)**</p>
<ul>
<li>只有……才；</li>
<li>除非……才;</li>
<li>除非……否则;</li>
</ul>
</li>
</ul>
<p>“除非否则”型Ex：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">(1) 除非q，否则非p;</span><br><span class="line">(2) 除非q，否则p;</span><br></pre></td></tr></table></div></figure>

<p>Ex: </p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">p➡q; </span><br><span class="line">读作：如果p，则q</span><br><span class="line">其中，p为p➡q的前件，q为p➡q的后件</span><br><span class="line"></span><br><span class="line">&lt;真值表&gt;:</span><br><span class="line">p | q | p➡q</span><br><span class="line">——————————————</span><br><span class="line">0 | 0 | 1</span><br><span class="line">0 | 1 | 1</span><br><span class="line">1 | 0 | 0 (*)</span><br><span class="line">1 | 1 | 1</span><br><span class="line"></span><br><span class="line">(*)特例：p为1，q为0，p➡q的真值为0</span><br></pre></td></tr></table></div></figure>


<p>(5) 同真假联结词(等价联结词)</p>
<ul>
<li>当且仅当</li>
<li>充分必要条件</li>
<li>“同真同假”关系</li>
</ul>
<p>Ex:</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">p&lt;-&gt;q;</span><br><span class="line">读作：p与q同真假</span><br><span class="line"></span><br><span class="line">&lt;真值表&gt;:</span><br><span class="line">p | q | p&lt;-&gt;q</span><br><span class="line">——————————————</span><br><span class="line">0 | 0 | 1</span><br><span class="line">0 | 1 | 0</span><br><span class="line">1 | 0 | 0</span><br><span class="line">1 | 1 | 1</span><br><span class="line"></span><br><span class="line">(记作：相同为1，不同为0)</span><br></pre></td></tr></table></div></figure>


        <h3 id="命题公式及其赋值"   >
          <a href="#命题公式及其赋值" class="heading-link"><i class="fas fa-link"></i></a><a href="#命题公式及其赋值" class="headerlink" title="命题公式及其赋值"></a>命题公式及其赋值</h3>
      <p>1、命题公式</p>
<ul>
<li>命题公式</li>
<li>合式公式 Well Formed Formulas</li>
</ul>
<p>(1) 优先级：</p>
<p>否定&gt;合取=析取&gt;蕴涵=同真假</p>
<p>(2) 子公式</p>
<p>(3) 层数</p>
<ul>
<li><strong>0层公式</strong>：<ul>
<li>不带联结词的命题公式</li>
</ul>
</li>
</ul>
<p>(4) 公式的赋值</p>
<ol start="2">
<li><p>公式的解释与真值表</p>
</li>
<li><p>命题公式的分类</p>
</li>
</ol>
<p>(1)重言式(永真式) Tautology</p>
<ul>
<li>A的每一组赋值都使A的真值为1</li>
</ul>
<p>(2)矛盾式(永假式)</p>
<ul>
<li>A的每一组赋值都使A的真值为0</li>
</ul>
<p>(3)可满足式</p>
<ul>
<li>至少存在一组赋值使A的真值为1</li>
</ul>
<p>(4) 命题公式的类型判断</p>
<ul>
<li>真值表最后1列全为1，则对应的命题公式为重言式</li>
<li>真值表最后1列全为0，则对应的命题公式为矛盾式</li>
<li>真值表最后1列有1有0，则对应的命题公式为可满足式</li>
</ul>

        <h3 id="等值演算"   >
          <a href="#等值演算" class="heading-link"><i class="fas fa-link"></i></a><a href="#等值演算" class="headerlink" title="等值演算"></a>等值演算</h3>
      <ol>
<li><p>常用等值式</p>
</li>
<li><p>等值演算的应用</p>
</li>
</ol>

        <h3 id="范式"   >
          <a href="#范式" class="heading-link"><i class="fas fa-link"></i></a><a href="#范式" class="headerlink" title="范式"></a>范式</h3>
      <p>1、范式的基本概念</p>
<p>(1) 文字</p>
<p>(2) 简单析取式(子句)</p>
<p>(3) 简单合取式(短语)</p>
<p>(4) 互补对</p>
<p>(5) 析取范式 Disjunctive normal form</p>
<p>(6) 合取范式 Conjunctive normal form</p>
<p>2、主析取范式</p>
<p>3、主合取范式</p>
<p>4、主析取范式与主合取范式的意义</p>
<p>5、范式存在定理</p>

        <h3 id="命题逻辑推理"   >
          <a href="#命题逻辑推理" class="heading-link"><i class="fas fa-link"></i></a><a href="#命题逻辑推理" class="headerlink" title="命题逻辑推理"></a>命题逻辑推理</h3>
      
        <h2 id="第2章-谓词逻辑"   >
          <a href="#第2章-谓词逻辑" class="heading-link"><i class="fas fa-link"></i></a><a href="#第2章-谓词逻辑" class="headerlink" title="第2章 谓词逻辑"></a>第2章 谓词逻辑</h2>
      <ul>
<li>谓词 Predicate</li>
</ul>

        <h3 id="谓词逻辑概述"   >
          <a href="#谓词逻辑概述" class="heading-link"><i class="fas fa-link"></i></a><a href="#谓词逻辑概述" class="headerlink" title="谓词逻辑概述"></a>谓词逻辑概述</h3>
      <p>1、谓词逻辑基本概念</p>
<p>2、描述实际问题</p>

        <h3 id="谓词公式与解释"   >
          <a href="#谓词公式与解释" class="heading-link"><i class="fas fa-link"></i></a><a href="#谓词公式与解释" class="headerlink" title="谓词公式与解释"></a>谓词公式与解释</h3>
      <p>1、谓词的合式公式</p>
<p>2、自由变元和约束变元</p>
<p>3、谓词公式的解释</p>
<p>4、谓词公式的分类</p>

        <h3 id="谓词公式的等值演算"   >
          <a href="#谓词公式的等值演算" class="heading-link"><i class="fas fa-link"></i></a><a href="#谓词公式的等值演算" class="headerlink" title="谓词公式的等值演算"></a>谓词公式的等值演算</h3>
      <p>1、谓词公式置换规则</p>
<p>2、变元换名规则</p>
<p>3、量词等值式</p>
<p>4、谓词公式的范式</p>

        <h3 id="谓词推理"   >
          <a href="#谓词推理" class="heading-link"><i class="fas fa-link"></i></a><a href="#谓词推理" class="headerlink" title="谓词推理"></a>谓词推理</h3>
      <p>1、谓词逻辑推理规则</p>
<p>2、谓词逻辑推理常见问题</p>
<p>3、谓词逻辑推理的应用</p>

        <h2 id="第3章-集合论"   >
          <a href="#第3章-集合论" class="heading-link"><i class="fas fa-link"></i></a><a href="#第3章-集合论" class="headerlink" title="第3章 集合论"></a>第3章 集合论</h2>
      
        <h3 id="集合的表示和基本概念"   >
          <a href="#集合的表示和基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合的表示和基本概念" class="headerlink" title="集合的表示和基本概念"></a>集合的表示和基本概念</h3>
      
        <h3 id="集合的运算"   >
          <a href="#集合的运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h3>
      
        <h3 id="集合的计数"   >
          <a href="#集合的计数" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合的计数" class="headerlink" title="集合的计数"></a>集合的计数</h3>
      <ul>
<li>朴素集合论</li>
<li>公理化集合论<ul>
<li>ZFC公理化集合论</li>
</ul>
</li>
</ul>
<ol>
<li><p>集合的符号表示</p>
<ul>
<li>枚举法 A={1，2，3，…}</li>
<li>叙述法 P={x | P(x) }</li>
<li>文氏图/维恩图</li>
<li>基数（base number）：集合A中的元素个数</li>
</ul>
</li>
<li><p>集合的组成</p>
<ul>
<li>空集</li>
<li>全集（universal set），记作U或E</li>
</ul>
</li>
<li><p>集合的相等关系</p>
<ul>
<li>集合中的元素是<strong>无序</strong>的</li>
<li>集合中的元素是<strong>不同</strong>的</li>
<li>外延性原理：当且仅当<strong>集合内的元素完全相同</strong>，记作A=B</li>
<li>子集和真子集</li>
<li>幂集（power set）</li>
</ul>
</li>
<li><p>集合的运算</p>
<ul>
<li>并集</li>
<li>交集</li>
<li>补集</li>
<li>差集</li>
<li>对称差集</li>
</ul>
</li>
<li><p>集合运算的基本等式</p>
<ul>
<li>幂等律</li>
<li>交换律</li>
<li>结合律</li>
<li>同一律</li>
<li>零律</li>
<li>分配律</li>
<li>吸收律</li>
<li>矛盾律和排中律</li>
<li>双重否定律</li>
<li>德摩根律</li>
</ul>
</li>
</ol>
<p>6.可数集合与不可数集合<br>(1) 自然数集的定义</p>
<ul>
<li>皮亚诺公理</li>
<li>冯诺依曼自然数定义</li>
</ul>
<p>(2) 等势Equipotential，记作：<br>    * A~B</p>
<p>(3) 可数集合</p>
<p>(4) 有理数集合</p>
<p>(5) 不可数集合</p>
<ol start="7">
<li>数理逻辑<br>(1) 命题Proposition<ul>
<li>定义：具有确切真值的陈述句</li>
<li>原子命题（简单命题）</li>
<li>复合命题</li>
<li>否定联结词</li>
<li>合取联结词</li>
<li>析取联结词</li>
<li>蕴涵联结词：<br> -善意推定</li>
</ul>
</li>
</ol>

        <h2 id="第4章-二元关系"   >
          <a href="#第4章-二元关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#第4章-二元关系" class="headerlink" title="第4章 二元关系"></a>第4章 二元关系</h2>
      
        <h3 id="二元关系的基本概念"   >
          <a href="#二元关系的基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#二元关系的基本概念" class="headerlink" title="二元关系的基本概念"></a>二元关系的基本概念</h3>
      <p>1、二元关系</p>
<p>(1) 有序对(序偶) Ordered pair，记作：</p>
<ul>
<li>&lt;x,y&gt;</li>
</ul>
<p>(2) 笛卡尔积</p>
<ul>
<li>A x B = {&lt;x,y&gt; | (x∈A)^(y∈B) }</li>
</ul>
<p>(3) n重有序组</p>
<p>(4) 二元关系</p>
<ul>
<li>空关系 Empty Relation</li>
<li>全关系 Total Relation</li>
<li>恒等关系 Identity Relation</li>
</ul>
<p>(5) 定义域和值域</p>
<ul>
<li>定义域 Domain<ul>
<li>C = domR</li>
</ul>
</li>
<li>值域 Range<ul>
<li>D = ranR</li>
</ul>
</li>
<li>域 Field</li>
</ul>
<p>(6) n元关系 n-ary relation</p>
<p>2、关系的集合表示</p>
<p>(1) 集合的两种基本表示法</p>
<ul>
<li>枚举法</li>
<li>叙述法</li>
</ul>
<p>(2) 关系的图形表示</p>

        <h3 id="关系运算"   >
          <a href="#关系运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3>
      
        <h3 id="关系的性质"   >
          <a href="#关系的性质" class="heading-link"><i class="fas fa-link"></i></a><a href="#关系的性质" class="headerlink" title="关系的性质"></a>关系的性质</h3>
      
        <h3 id="关系的闭包"   >
          <a href="#关系的闭包" class="heading-link"><i class="fas fa-link"></i></a><a href="#关系的闭包" class="headerlink" title="关系的闭包"></a>关系的闭包</h3>
      
        <h3 id="等价关系"   >
          <a href="#等价关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h3>
      
        <h3 id="偏序关系"   >
          <a href="#偏序关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h3>
      
        <h2 id="第5章-图论"   >
          <a href="#第5章-图论" class="heading-link"><i class="fas fa-link"></i></a><a href="#第5章-图论" class="headerlink" title="第5章 图论"></a>第5章 图论</h2>
      
        <h3 id="图的基本概念"   >
          <a href="#图的基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3>
      <ul>
<li><p>图：由<strong>顶点</strong>和<strong>边</strong>组成</p>
</li>
<li><p>多重集合：元素可以重复出现的集合</p>
</li>
<li><p>无序积：{a,b}=(a,b)</p>
</li>
</ul>
<ol>
<li>无向图：<br>G=&lt;V,E&gt;<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">V,顶点集</span><br><span class="line">E，边集</span><br></pre></td></tr></table></div></figure></li>
</ol>
<ol start="2">
<li><p>有向图</p>
</li>
<li><p>图的矩阵表示</p>
</li>
</ol>

        <h3 id="图的连通性"   >
          <a href="#图的连通性" class="heading-link"><i class="fas fa-link"></i></a><a href="#图的连通性" class="headerlink" title="图的连通性"></a>图的连通性</h3>
      
        <h3 id="特殊图"   >
          <a href="#特殊图" class="heading-link"><i class="fas fa-link"></i></a><a href="#特殊图" class="headerlink" title="特殊图"></a>特殊图</h3>
      
        <h3 id="MIT-Chapter-1"   >
          <a href="#MIT-Chapter-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#MIT-Chapter-1" class="headerlink" title="MIT Chapter 1"></a>MIT Chapter 1</h3>
      <ol>
<li>谓词是其真理的命题</li>
</ol>
<p>Ex:</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">n | n^2+n+41 | prime</span><br><span class="line">0 | 0        | True</span><br><span class="line">1 | 43       | True</span><br><span class="line">2 | 47       | True</span><br><span class="line">————————————————————————</span><br><span class="line">又，原式=n(n+1)+41</span><br><span class="line">40| 1681     | False</span><br><span class="line">41| 1763     | False</span><br><span class="line"></span><br><span class="line">-Prime: 质数(素数)</span><br></pre></td></tr></table></div></figure>

<ol start="2">
<li>蕴涵</li>
</ol>
<p>Ex:</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">p | q        | p➡q  | q➡p  | q&lt;=&gt;p</span><br><span class="line">————————————————————————————————————</span><br><span class="line">T | T        | T     | T     | T</span><br><span class="line">T | F        | F     | T     | F</span><br><span class="line">F | T        | T     | F     | F</span><br><span class="line">F | F        | T     | T     | T   (*)</span><br><span class="line"></span><br><span class="line">(*) If pigs could fly, I would be king.</span><br></pre></td></tr></table></div></figure>

<ol start="3">
<li>公理是被<strong>假定为真</strong>的<em>命题</em></li>
</ol>
<ul>
<li>An axiom is a proposition that is assumed to be true.</li>
</ul>
<p>(1) Axioms should be:</p>
<ul>
<li>consistent</li>
<li>complete</li>
</ul>
<p>(2) Def:</p>
<ul>
<li>A set of axioms is consistent,if no proposition can be proved to be both true and false.</li>
<li>A set of axioms is said to be complete, if it can be used to prove every proposition is either true or false.</li>
</ul>

        <h3 id="MIT-Chapter-2"   >
          <a href="#MIT-Chapter-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#MIT-Chapter-2" class="headerlink" title="MIT Chapter 2"></a>MIT Chapter 2</h3>
      <ol>
<li>Proof of Contradiction</li>
</ol>
<ul>
<li>To prove p is true, we assume p is false, then use that hypothesis to derive a falsehood.</li>
</ul>
<p>Ex：</p>
<p>Hypothesis: 90 is bigger than 92</p>
<p>Proof: by picture</p>
<ol start="2">
<li>Induction</li>
</ol>
<ul>
<li>advantage<ul>
<li>powerful</li>
<li>commonly used</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>离散数学</tag>
        <tag>Discrete Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>重现:历久弥新的光影世界</title>
    <url>/2022/07/20/%E9%87%8D%E7%8E%B0%EF%BC%9A%E5%8E%86%E4%B9%85%E5%BC%A5%E6%96%B0%E7%9A%84%E5%85%89%E5%BD%B1%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[
        <h2 id="记录-豆瓣年度电影榜单"   >
          <a href="#记录-豆瓣年度电影榜单" class="heading-link"><i class="fas fa-link"></i></a><a href="#记录-豆瓣年度电影榜单" class="headerlink" title="记录:豆瓣年度电影榜单"></a>记录:豆瓣年度电影榜单</h2>
      <p>豆瓣2022年度电影榜单:</p>
<p><span class="exturl"><a class="exturl__link"   href="https://movie.douban.com/annual/2022?amp;fullscreen=1" >豆瓣2022年度电影榜单</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>豆瓣2021年度电影榜单:</p>
<p><span class="exturl"><a class="exturl__link"   href="https://movie.douban.com/annual/2021?source=movie_navigation" >豆瓣2021年度电影榜单</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>豆瓣2020年度电影榜单:</p>
<p><span class="exturl"><a class="exturl__link"   href="https://movie.douban.com/annual/2020?source=navigation" >豆瓣2020年度电影榜单</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>豆瓣2019年度电影榜单:</p>
<p><span class="exturl"><a class="exturl__link"   href="https://movie.douban.com/annual/2019?source=navigation" >豆瓣2019年度电影榜单</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>豆瓣2018年度电影榜单:</p>
<p><span class="exturl"><a class="exturl__link"   href="https://movie.douban.com/annual/2018?source=movie_navigation#33" >豆瓣2018年度电影榜单</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>豆瓣2017年度电影榜单:</p>
<p><span class="exturl"><a class="exturl__link"   href="https://movie.douban.com/annual/2017?source=broadcast&amp;dt_platform=douban_broadcast&amp;dt_dapp=1&amp;dt_dapp=1" >豆瓣2017年度电影榜单</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>豆瓣2016年度电影榜单：</p>
<p><span class="exturl"><a class="exturl__link"   href="https://movie.douban.com/annual2016/?source=movie_annual&amp;dt_dapp=1&amp;dt_dapp=1" >豆瓣2016年度电影榜单</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>豆瓣2015年度电影榜单:</p>
<p><span class="exturl"><a class="exturl__link"   href="https://movie.douban.com/annual2015/?source=movie_annual&amp;dt_dapp=1&amp;dt_dapp=1" >豆瓣2015年度电影榜单</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>豆瓣2014年度电影榜单：</p>
<p><span class="exturl"><a class="exturl__link"   href="https://movie.douban.com/review2014/?bid=gVzx19kzY50&amp;channel=0&amp;dt_dapp=1&amp;dt_dapp=1" >豆瓣2014年度电影榜单</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <tags>
        <tag>Film</tag>
      </tags>
  </entry>
  <entry>
    <title>重温《千与千寻》</title>
    <url>/2022/06/10/%E9%87%8D%E6%B8%A9%E3%80%8A%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB%E3%80%8B/</url>
    <content><![CDATA[
        <h2 id="重温《千与千寻》"   >
          <a href="#重温《千与千寻》" class="heading-link"><i class="fas fa-link"></i></a><a href="#重温《千与千寻》" class="headerlink" title="重温《千与千寻》"></a>重温《千与千寻》</h2>
      <p>天赋、坚韧和赶上好时候</p>
]]></content>
      <tags>
        <tag>日记</tag>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>精灵少女和怪兽男孩</title>
    <url>/2022/07/20/%E7%B2%BE%E7%81%B5%E5%B0%91%E5%A5%B3%E5%92%8C%E6%80%AA%E5%85%BD%E7%94%B7%E5%AD%A9/</url>
    <content><![CDATA[
        <h2 id="Kpop中最特别的两个存在："   >
          <a href="#Kpop中最特别的两个存在：" class="heading-link"><i class="fas fa-link"></i></a><a href="#Kpop中最特别的两个存在：" class="headerlink" title="Kpop中最特别的两个存在："></a>Kpop中最特别的两个存在：</h2>
      <p>精灵少女函数f(x)和怪兽男孩文本txt。</p>
<p>函数f(x) | <span class="exturl"><a class="exturl__link"   href="https://open.spotify.com/track/1xbJNPLSTtIWgGTt3Uu4gl?si=b03d31cd063c4285" >미행 (그림자: Shadow)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>文本txt | <span class="exturl"><a class="exturl__link"   href="https://open.spotify.com/track/0EmYZZ8OqeALedVhijSjsg?si=e636bbc1dc6048c6" >어느날 머리에서 뿔이 자랐다 (CROWN)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>读过的书（文史类）</title>
    <url>/2022/06/09/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6%EF%BC%88%E6%96%87%E5%8F%B2%E7%B1%BB%EF%BC%89/</url>
    <content><![CDATA[
        <h2 id="读过的书（文史类）"   >
          <a href="#读过的书（文史类）" class="heading-link"><i class="fas fa-link"></i></a><a href="#读过的书（文史类）" class="headerlink" title="读过的书（文史类）"></a>读过的书（文史类）</h2>
      <p>之所以会有汇总以前读过的书的念头，是之前登录图书管理系统查看超期图书时，在分类栏中头一次看到自己全部的借阅记录。</p>
<p>高中在<span class="exturl"><a class="exturl__link"   href="https://weread.qq.com/web/bookDetail/7e632350811e60c82g015228" >《语文基础知识手册》</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>上背过很多的诗词，到现在基本都忘了，大一时背的《唐诗三百首》也是。</p>
<p>唯一印象深刻，且时时勉励自己的，是那句「行百里者，半九十」。</p>
<p>很多事，往往到最后关头最容易放弃，然而其实只要再坚持一下，总是会有不同的、豁然开朗的风景。</p>
<p>因而希望自己，在面对不同程度的困境时，都能理性地、客观地反求诸己，意识到自己认知上的局限性，秉持着皓首穷经的目标，一直坚持。</p>
<p>于是从图书馆系统中，将书目借阅历史导出为excel表格，并删除重复借阅的记录和其它类型的书籍。</p>
<p>此外再补充一些<span class="exturl"><a class="exturl__link"   href="https://weread.qq.com/" >微信读书</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>、<span class="exturl"><a class="exturl__link"   href="https://du.163.com/" >网易蜗牛读书</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和能记起来的部分中小学的阅读记录，然后通过<span class="exturl"><a class="exturl__link"   href="https://m.douban.com/subject_collection/book_top250" >豆瓣读书Top250</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>进行查漏补缺，最后汇总成以下<span class="exturl"><a class="exturl__link"   href="https://share.weiyun.com/Om2GCzKB" >Excel表格</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>
]]></content>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
</search>
